{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\nimport axios from 'axios';\nimport 'source-map-support/register';\nimport { dwdWarncellIdLong } from './lib/def/dwdWarncellIdLong';\nimport { ProviderController } from './lib/provider.js';\nimport { Library } from './lib/library.js';\naxios.defaults.timeout = 8000;\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass WeatherWarnings extends utils.Adapter {\n    library: Library;\n    providerController: ProviderController | null = null;\n    numOfRawWarnings: number = 5;\n    adminTimeoutRef: any = null;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'weather-warnings',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this);\n        this.providerController = new ProviderController(this);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n\n        /*\n        For every state in the system there has to be also an object of type state\n        Here a simple template for a boolean variable named \"testVariable\"\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n        */\n        /*await this.setObjectNotExistsAsync('testVariable', {\n            type: 'state',\n            common: {\n                name: 'testVariable',\n                type: 'boolean',\n                role: 'indicator',\n                read: true,\n                write: true,\n            },\n            native: {},\n        });*/\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        //this.subscribeStates('testVariable');\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates('lights.*');\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates('*');\n\n        /*\n            setState examples\n            you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n        */\n\n        // examples for the checkPassword/checkGroup functions\n        let result = await this.checkPasswordAsync('admin', 'iobroker');\n        this.log.info('check user admin pw iobroker: ' + result);\n\n        result = await this.checkGroupAsync('admin', 'admin');\n        this.log.info('check group user admin group admin: ' + result);\n\n        //laengen: 13.05501, breiten: 47.80949\n        setTimeout(\n            async function (self: any) {\n                if (!self.providerController) return;\n                if (!self) return;\n                try {\n                    const states = await self.getStatesAsync('*');\n                    self.library.initStates(states);\n                } catch (error) {\n                    self.log.error(`catch (1): init error while reading states! ${error}`);\n                }\n                // dwdSelectID gegen Abfrage pr\u00FCfen und erst dann als valide erkl\u00E4ren.\n                if (self.config.dwdSelectId > 10000 && self.config.dwdEnabled) {\n                    self.providerController.createProviderIfNotExist({\n                        service: 'dwdService',\n                        warncellId: self.config.dwdSelectId, //805111000 D\u00FCssel - kirn 807133052\n                    });\n                }\n                if (\n                    self.config.zamgEnabled &&\n                    self.config.zamgSelectID &&\n                    typeof self.config.zamgSelectID == 'string'\n                ) {\n                    const zamgArr = self.config.zamgSelectID.split('#');\n                    if (zamgArr.length == 2) {\n                        self.providerController.createProviderIfNotExist({\n                            service: 'zamgService',\n                            warncellId: zamgArr, //805111000 D\u00FCssel - kirn 807133052\n                        });\n                    }\n                }\n                if (self.config.uwzEnabled && self.config.uwzSelectID) {\n                    self.providerController.createProviderIfNotExist({\n                        service: 'uwzService',\n                        warncellId: 'UWZ' + self.config.uwzSelectID.toUpperCase(), //UWZ + Land + PLZ\n                    });\n                }\n\n                self.providerController.updateEndless(self.providerController);\n            },\n            4000,\n            this,\n        );\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            if (this.providerController) this.providerController.delete();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    // \tif (obj) {\n    // \t\t// The object was changed\n    // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    // \t} else {\n    // \t\t// The object was deleted\n    // \t\tthis.log.info(`object ${id} deleted`);\n    // \t}\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            this.log.debug(`Retrieve ${obj.command} from ${obj.from} message: ${JSON.stringify(obj)}`);\n            switch (obj.command) {\n                case 'dwd.name':\n                case 'dwd.name.text':\n                    if (obj.callback) {\n                        if (this.adminTimeoutRef) this.clearTimeout(this.adminTimeoutRef);\n                        try {\n                            this.log.debug(`message ${obj.command} start gathering data.`);\n                            const data = dwdWarncellIdLong;\n                            //if (!data) data = await axios.get(this.config.dwdWarncellTextUrl);\n                            const text: any[] = [];\n                            if (text.length == 0) {\n                                const dataArray: string[] = data.split('\\n');\n\n                                dataArray.splice(0, 1);\n                                dataArray.forEach((element) => {\n                                    const value = element.split(';')[0];\n                                    const cityText = element.split(';')[1];\n                                    //const cityText = element.split(';')[2];\n                                    if (\n                                        value &&\n                                        (value.startsWith('10') ||\n                                            value.startsWith('9') ||\n                                            value.startsWith('8') ||\n                                            value.startsWith('7'))\n                                    ) {\n                                        //if (text) text.push(`${cityText} #${value}`);\n                                        if (text) text.push({ label: cityText, value: value.trim() });\n                                    }\n                                });\n                                text.sort((a, b) => {\n                                    const nameA = a.label.toUpperCase(); // ignore upper and lowercase\n                                    const nameB = b.label.toUpperCase(); // ignore upper and lowercase\n                                    if (nameA < nameB) {\n                                        return -1;\n                                    }\n                                    if (nameA > nameB) {\n                                        return 1;\n                                    }\n\n                                    return 0;\n                                });\n                            }\n                            const msg = obj.message;\n                            if (msg.dwd.length > 2) {\n                                const result = text.filter(\n                                    (a) =>\n                                        (a.label && a.label.toUpperCase().includes(msg.dwd.toUpperCase())) ||\n                                        (!isNaN(msg.dwd) && Number(a.value) == Number(msg.dwd)),\n                                );\n                                if (result.length == 1) this.config.dwdSelectId = result[0].value;\n                                this.log.debug('inside of send to ' + msg.dwd + '   ' + JSON.stringify(result));\n                                if (obj.command == 'dwd.name') this.sendTo(obj.from, obj.command, result, obj.callback);\n                                else if (obj.command == 'dwd.name.text')\n                                    this.sendTo(\n                                        obj.from,\n                                        obj.command,\n                                        result.length == 1 ? result[0].label : '',\n                                        obj.callback,\n                                    );\n                                this.log.debug(`ID is is: ${this.config.dwdSelectId}`);\n                            } else {\n                                this.log.debug(`else because length is: ${msg.dwd.length}`);\n                                if (obj.command == 'dwd.name.text')\n                                    this.sendTo(obj.from, obj.command, '', obj.callback);\n                                else this.sendTo(obj.from, obj.command, text, obj.callback);\n                            }\n                        } catch (e) {\n                            this.log.error(`catch (41): ${e}`);\n                            if (obj.command == 'dwd.name.text') this.sendTo(obj.from, obj.command, '', obj.callback);\n                            else this.sendTo(obj.from, obj.command, [{ label: 'N/A', value: '' }], obj.callback);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    //@ts-expect-error no idea why options need log\n    module.exports = (options: WeatherWarnings | undefined) => new WeatherWarnings(options);\n} else {\n    // otherwise start the instance directly\n    (() => new WeatherWarnings())();\n}\nexport = WeatherWarnings;\n"],
  "mappings": "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",
  "names": ["axios"]
}
