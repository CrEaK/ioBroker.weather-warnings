{
  "version": 3,
  "sources": ["../../src/lib/library.ts"],
  "sourcesContent": ["import jsonata from 'jsonata';\nimport _fs from 'fs';\nimport type { statesObjectsWarningsType } from './def/definition';\nimport { genericStateObjects } from './def/definition';\nimport type WeatherWarnings from '../main';\n\n// only change this for other adapters\ntype AdapterClassDefinition = WeatherWarnings;\n\ntype LibraryStateVal = LibraryStateValJson | undefined;\ntype LibraryStateValJson = {\n    type: ioBroker.ObjectType;\n    stateTyp: string | undefined;\n    val: ioBroker.StateValue | undefined;\n    ts: number;\n    ack: boolean;\n    init: boolean;\n};\n\n// Generic library module and base classes, do not insert specific adapter code here.\n\n/**\n * Base class with this.log function\n */\nexport class BaseClass {\n    unload: boolean = false;\n    log: CustomLog;\n    adapter: AdapterClassDefinition;\n    library: Library;\n    name: string = ``;\n    constructor(adapter: AdapterClassDefinition, name: string = '') {\n        this.name = name;\n        this.log = new CustomLog(adapter, this.name);\n        this.adapter = adapter;\n        this.library = adapter.library;\n    }\n    async delete(): Promise<void> {\n        this.unload = true;\n    }\n}\n\nclass CustomLog {\n    private adapter: AdapterClassDefinition;\n    private prefix: string;\n    constructor(adapter: AdapterClassDefinition, text: string = '') {\n        this.adapter = adapter;\n        this.prefix = text;\n    }\n    getName(): string {\n        return this.prefix;\n    }\n    debug(log: string, log2: string = ''): void {\n        this.adapter.log.debug(log2 ? `[${log}] ${log2}` : `[${this.prefix}] ${log}`);\n    }\n    info(log: string, log2: string = ''): void {\n        this.adapter.log.info(log2 ? `[${log}] ${log2}` : `[${this.prefix}] ${log}`);\n    }\n    warn(log: string, log2: string = ''): void {\n        this.adapter.log.warn(log2 ? `[${log}] ${log2}` : `[${this.prefix}] ${log}`);\n    }\n    error(log: string, log2: string = ''): void {\n        this.adapter.log.error(log2 ? `[${log}] ${log2}` : `[${this.prefix}] ${log}`);\n    }\n    setLogPrefix(text: string): void {\n        this.prefix = text;\n    }\n}\n\nexport class Library extends BaseClass {\n    stateDataBase: { [key: string]: LibraryStateVal } = {};\n    language: ioBroker.Languages = 'en';\n    forbiddenDirs: string[] = [];\n    translation: { [key: string]: string } = {};\n\n    constructor(adapter: AdapterClassDefinition, _options: any = null) {\n        super(adapter, 'library');\n        this.stateDataBase = {};\n    }\n\n    async init(): Promise<void> {\n        const obj = await this.adapter.getForeignObjectAsync('system.config');\n        if (obj) {\n            await this.setLanguage(obj.common.language, true);\n        } else {\n            await this.setLanguage('en', true);\n        }\n    }\n\n    /**\n     * Write/create from a Json with defined keys, the associated states and channels\n     *\n     * @param prefix iobroker datapoint prefix where to write\n     * @param objNode Entry point into the definition json.\n     * @param def the definition json\n     * @param data The Json to read\n     * @param expandTree expand arrays up to 99\n     * @returns  void\n     */\n    async writeFromJson(\n        // provider.dwd.*warncellid*.warnung*1-5*\n        prefix: string,\n        objNode: string, // the json path to object def for jsonata\n        def: statesObjectsWarningsType,\n        data: any,\n        expandTree: boolean = false,\n    ): Promise<void> {\n        if (!def || typeof def !== 'object') {\n            return;\n        }\n        if (data === undefined || ['string', 'number', 'boolean', 'object'].indexOf(typeof data) == -1) {\n            return;\n        }\n\n        const objectDefinition = objNode ? await this.getObjectDefFromJson(`${objNode}`, def) : null;\n\n        if (objectDefinition) {\n            objectDefinition.native = {\n                ...(objectDefinition.native || {}),\n                objectDefinitionReference: objNode,\n            };\n        }\n\n        if (typeof data === 'object' && data !== null) {\n            // handle array\n            if (Array.isArray(data)) {\n                if (!objectDefinition) {\n                    return;\n                }\n                if (this.adapter.config.expandArray || objectDefinition.type !== 'state' || expandTree) {\n                    let a = 0;\n                    for (const k in data) {\n                        const defChannel = this.getChannelObject(objectDefinition);\n\n                        const dp = `${prefix}${`00${a++}`.slice(-2)}`;\n                        // create folder\n                        await this.writedp(dp, null, defChannel);\n\n                        await this.writeFromJson(dp, `${objNode}`, def, data[k], expandTree);\n                    }\n                } else {\n                    this.writeFromJson(prefix, objNode, def, JSON.stringify(data) || '[]', expandTree);\n                }\n                //objectDefinition._id = `${this.adapter.name}.${this.adapter.instance}.${prefix}.${key}`;\n            } else {\n                // create folder\n                if (objectDefinition) {\n                    const defChannel = this.getChannelObject(objectDefinition);\n                    await this.writedp(prefix, null, defChannel);\n                }\n                if (data === null) {\n                    return;\n                }\n\n                for (const k in data) {\n                    await this.writeFromJson(`${prefix}.${k}`, `${objNode}.${k}`, def, data[k], expandTree);\n                }\n            }\n        } else {\n            if (!objectDefinition) {\n                return;\n            }\n            await this.writedp(prefix, data, objectDefinition);\n        }\n    }\n\n    /**\n     * Get the ioBroker.Object out of stateDefinition\n     *\n     * @param key is the deep linking key to the definition\n     * @param data  is the definition dataset\n     * @returns ioBroker.ChannelObject | ioBroker.DeviceObject | ioBroker.StateObject\n     */\n    async getObjectDefFromJson(key: string, data: any): Promise<ioBroker.Object> {\n        //let result = await jsonata(`${key}`).evaluate(data);\n        let result = this.deepJsonValue(key, data);\n        if (result === null || result === undefined) {\n            const k = key.split('.');\n            if (k && k[k.length - 1].startsWith('_')) {\n                result = genericStateObjects.customString;\n            } else {\n                this.log.warn(`No definition for ${key}!`);\n                result = genericStateObjects.state;\n            }\n        }\n        return this.cloneObject(result);\n    }\n\n    deepJsonValue(key: string, data: any): any {\n        if (!key || !data || typeof data !== 'object' || typeof key !== 'string') {\n            throw new Error(`Error(222) data or key are missing/wrong type!`);\n        }\n        const k = key.split(`.`);\n        let c = 0,\n            s = data;\n        while (c < k.length) {\n            s = s[k[c++]];\n        }\n        return s;\n    }\n\n    /**\n     * Get a channel/device definition from property _channel out of a getObjectDefFromJson() result or a default definition.\n     *\n     * @param def the data coming from getObjectDefFromJson()\n     * @param definition\n     * @returns ioBroker.ChannelObject | ioBroker.DeviceObject or a default channel obj\n     */\n    getChannelObject(\n        definition:\n            | (ioBroker.Object & {\n                  _channel?: ioBroker.Object;\n              })\n            | null = null,\n    ): ioBroker.ChannelObject | ioBroker.DeviceObject {\n        const def = (definition && definition._channel) || null;\n        const result: ioBroker.ChannelObject | ioBroker.DeviceObject = {\n            _id: def ? def._id : '',\n            type: def && def.type != 'device' ? 'channel' : 'device',\n            common: {\n                name: (def && def.common && def.common.name) || 'no definition',\n            },\n            native: (def && def.native) || {},\n        };\n        return result;\n    }\n\n    /**\n     * Write/Create the specified data point with value, will only be written if val != oldval and obj.type == state or the data point value in the DB is not undefined. Channel and Devices have an undefined value.\n     *\n     * @param dp Data point to be written. Library.clean() is called with it.\n     * @param val Value for this data point. Channel vals (old and new) are undefined so they never will be written.\n     * @param obj The object definition for this data point (ioBroker.ChannelObject | ioBroker.DeviceObject | ioBroker.StateObject)\n     * @returns void\n     */\n    async writedp(dp: string, val: ioBroker.StateValue | undefined, obj: ioBroker.Object | null = null): Promise<void> {\n        dp = this.cleandp(dp);\n        let node = this.readdp(dp);\n        const del = !this.isDirAllowed(dp);\n\n        if (node === undefined) {\n            if (!obj) {\n                throw new Error('writedp try to create a state without object informations.');\n            }\n            obj._id = `${this.adapter.name}.${this.adapter.instance}.${dp}`;\n            if (typeof obj.common.name == 'string') {\n                obj.common.name = await this.getTranslationObj(obj.common.name);\n            }\n            if (!del) {\n                await this.adapter.extendObjectAsync(dp, obj);\n            }\n            const stateType = obj && obj.common && obj.common.type;\n            node = this.setdb(dp, obj.type, undefined, stateType, true);\n        } else if (node.init && obj) {\n            if (typeof obj.common.name == 'string') {\n                obj.common.name = await this.getTranslationObj(obj.common.name);\n            }\n            if (!del) {\n                await this.adapter.extendObjectAsync(dp, obj);\n            }\n        }\n\n        if (obj && obj.type !== 'state') {\n            return;\n        }\n\n        if (node) {\n            this.setdb(dp, node.type, val, node.stateTyp, true);\n        }\n\n        if (node && (node.val != val || !node.ack)) {\n            const typ = (obj && obj.common && obj.common.type) || node.stateTyp;\n            if (typ && typ != typeof val && val !== undefined) {\n                val = this.convertToType(val, typ);\n            }\n            if (!del) {\n                await this.adapter.setStateAsync(dp, {\n                    val: val,\n                    ts: Date.now(),\n                    ack: true,\n                });\n            }\n        }\n    }\n\n    setForbiddenDirs(dirs: any[]): void {\n        this.forbiddenDirs = this.forbiddenDirs.concat(dirs);\n    }\n\n    isDirAllowed(dp: string): boolean {\n        if (dp && dp.split('.').length <= 2) {\n            return true;\n        }\n        for (const a in this.forbiddenDirs) {\n            if (dp.search(new RegExp(this.forbiddenDirs[a], 'g')) != -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getStates(str: string): { [key: string]: LibraryStateVal } {\n        const result: { [key: string]: LibraryStateVal } = {};\n        for (const dp in this.stateDataBase) {\n            if (dp.search(new RegExp(str, 'g')) != -1) {\n                result[dp] = this.stateDataBase[dp];\n            }\n        }\n        return result;\n    }\n\n    async cleanUpTree(hold: string[], filter: string[] | null, deep: number): Promise<void> {\n        let del = [];\n        for (const dp in this.stateDataBase) {\n            if (filter && filter.filter(a => dp.startsWith(a) || a.startsWith(dp)).length == 0) {\n                continue;\n            }\n            if (hold.filter(a => dp.startsWith(a) || a.startsWith(dp)).length > 0) {\n                continue;\n            }\n            delete this.stateDataBase[dp];\n            del.push(dp.split('.').slice(0, deep).join('.'));\n        }\n        del = del.filter((item, pos, arr) => {\n            return arr.indexOf(item) == pos;\n        });\n        for (const a in del) {\n            await this.adapter.delObjectAsync(del[a], { recursive: true });\n            this.log.debug(`Clean up tree delete: ${del[a]}`);\n        }\n    }\n\n    /**\n     * Remove forbidden chars from datapoint string.\n     *\n     * @param string Datapoint string to clean\n     * @param lowerCase lowerCase() first param.\n     * @param removePoints\n     * @returns void\n     */\n    cleandp(string: string, lowerCase: boolean = false, removePoints: boolean = false): string {\n        if (!string && typeof string != 'string') {\n            return string;\n        }\n\n        string = string.replace(this.adapter.FORBIDDEN_CHARS, '_');\n        // hardliner\n        if (removePoints) {\n            string = string.replace(/[^0-9A-Za-z_-]/gu, '_');\n        } else {\n            string = string.replace(/[^0-9A-Za-z._-]/gu, '_');\n        }\n        return lowerCase ? string.toLowerCase() : string;\n    }\n\n    /**\n     * Convert a value to the given type\n     *\n     * @param value then value to convert\n     * @param type the target type\n     */\n    convertToType(value: ioBroker.StateValue | Array<any> | JSON, type: string): ioBroker.StateValue {\n        if (value === null) {\n            return null;\n        }\n        if (type === undefined) {\n            throw new Error('convertToType type undefined not allowed!');\n        }\n        if (value === undefined) {\n            value = '';\n        }\n\n        const old_type = typeof value;\n        let newValue: ioBroker.StateValue = typeof value == 'object' ? JSON.stringify(value) : value;\n\n        if (type !== old_type) {\n            switch (type) {\n                case 'string':\n                    // eslint-disable-next-line\n                    newValue = value.toString() || '';\n                    break;\n                case 'number':\n                    newValue = value ? Number(value) : 0;\n                    break;\n                case 'boolean':\n                    newValue = !!value;\n                    break;\n                case 'array':\n                case 'json':\n                    //JSON.stringify() is done before\n                    break;\n            }\n        }\n        // get a warning message when we try to convert a object/array.\n        return newValue;\n    }\n\n    readdp(dp: string): LibraryStateVal {\n        return this.stateDataBase[this.cleandp(dp)];\n    }\n\n    setdb(\n        dp: string,\n        type: ioBroker.ObjectType,\n        val: ioBroker.StateValue | undefined,\n        stateType: string | undefined,\n        ack: boolean = true,\n        ts: number = Date.now(),\n        init: boolean = false,\n    ): LibraryStateVal {\n        this.stateDataBase[dp] = {\n            type: type,\n            stateTyp:\n                stateType !== undefined\n                    ? stateType\n                    : this.stateDataBase[dp] !== undefined && this.stateDataBase[dp].stateTyp !== undefined\n                      ? this.stateDataBase[dp].stateTyp\n                      : undefined,\n            val: val,\n            ack: ack,\n            ts: ts ? ts : Date.now(),\n            init: init,\n        };\n        return this.stateDataBase[dp];\n    }\n\n    async memberDeleteAsync(data: any[]): Promise<void> {\n        for (const d of data) {\n            await d.delete();\n        }\n    }\n\n    cloneObject(obj: ioBroker.Object): ioBroker.Object {\n        if (typeof obj !== 'object') {\n            this.log.error(`Error clone object target is type: ${typeof obj}`);\n            return obj;\n        }\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    cloneGenericObject(obj: object): object {\n        if (typeof obj !== 'object') {\n            this.log.error(`Error clone object target is type: ${typeof obj}`);\n            return obj;\n        }\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    async fileExistAsync(file: string): Promise<boolean> {\n        if (_fs.existsSync(`./admin/${file}`)) {\n            return true;\n        }\n        return false;\n    }\n    async readWithJsonata(\n        data: object,\n        cmd: { [key: string]: string } | string,\n    ): Promise<string | { [key: string]: string }> {\n        let result: any;\n        if (typeof cmd === 'string') {\n            if (cmd == '') {\n                return '';\n            }\n            try {\n                result = await jsonata(cmd).evaluate(data);\n                if (result == undefined) {\n                    return '';\n                }\n            } catch (error: any) {\n                this.log.error(error.message);\n                this.log.error(`The cmd: ${cmd} is invaild Message: ${error.message}.`);\n            }\n        } else {\n            result = {};\n            for (const k in cmd) {\n                if (cmd[k]) {\n                    try {\n                        result[k] = await jsonata(cmd[k]).evaluate(data);\n                    } catch (error: any) {\n                        this.log.error(error);\n                        this.log.error(`The cmd: ${cmd[k]} for key ${k} is invaild.`);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Initialise the database with the states to prevent unnecessary creation and writing.\n     *\n     * @param states States that are to be read into the database during initialisation.\n     * @returns void\n     */\n    async initStates(states: {\n        [key: string]: {\n            val: ioBroker.StateValue;\n            ts: number;\n            ack: boolean;\n        };\n    }): Promise<void> {\n        if (!states) {\n            return;\n        }\n        const removedChannels: string[] = [];\n        for (const state in states) {\n            const dp = state.replace(`${this.adapter.name}.${this.adapter.instance}.`, '');\n            const del = !this.isDirAllowed(dp);\n            if (!del) {\n                const obj = await this.adapter.getObjectAsync(dp);\n                if (!this.adapter.config.useJsonHistory && dp.endsWith('.warning.jsonHistory')) {\n                    this.log.debug(`delete state: ${dp}`);\n                    await this.adapter.delObjectAsync(dp);\n                    continue;\n                }\n                this.setdb(\n                    dp,\n                    'state',\n                    states[state] && states[state].val ? states[state].val : undefined,\n                    obj && obj.common && obj.common.type ? obj.common.type : undefined,\n                    states[state] && states[state].ack,\n                    states[state] && states[state].ts ? states[state].ts : Date.now(),\n                    true,\n                );\n            } else {\n                if (!removedChannels.every(a => !dp.startsWith(a))) {\n                    continue;\n                }\n                const channel = dp.split('.').slice(0, 4).join('.');\n                removedChannels.push(channel);\n                await this.adapter.delObjectAsync(channel, { recursive: true });\n                this.log.debug(`Delete channel with dp:${channel}`);\n            }\n        }\n    }\n\n    /**\n     * Resets states that have not been updated in the database in offset time.\n     *\n     * @param prefix String with which states begin that are reset.\n     * @param offset Time in ms since last update.\n     * @returns void\n     */\n    async garbageColleting(prefix: string, offset: number = 2000): Promise<void> {\n        if (!prefix) {\n            return;\n        }\n        if (this.stateDataBase) {\n            for (const id in this.stateDataBase) {\n                if (id.startsWith(prefix)) {\n                    const state = this.stateDataBase[id];\n                    if (!state || state.val == undefined) {\n                        continue;\n                    }\n                    if (state.ts < Date.now() - offset) {\n                        let newVal: -1 | '' | '{}' | '[]' | false | null | undefined;\n                        switch (state.stateTyp) {\n                            case 'string':\n                                if (typeof state.val == 'string') {\n                                    if (state.val.startsWith('{') && state.val.endsWith('}')) {\n                                        newVal = '{}';\n                                    } else if (state.val.startsWith('[') && state.val.endsWith(']')) {\n                                        newVal = '[]';\n                                    } else {\n                                        newVal = '';\n                                    }\n                                } else {\n                                    newVal = '';\n                                }\n                                break;\n                            case 'bigint':\n                            case 'number':\n                                newVal = -1;\n                                break;\n\n                            case 'boolean':\n                                newVal = false;\n                                break;\n                            case 'symbol':\n                            case 'object':\n                            case 'function':\n                                newVal = null;\n                                break;\n                            case 'undefined':\n                                newVal = undefined;\n                                break;\n                        }\n                        await this.writedp(id, newVal);\n                    }\n                }\n            }\n        }\n    }\n\n    getLocalLanguage(): string {\n        if (this.language) {\n            return this.language;\n        }\n        return 'en-En';\n    }\n    getTranslation(key: string): string {\n        if (this.translation[key] !== undefined) {\n            return this.translation[key];\n        }\n        return key;\n    }\n    existTranslation(key: string): boolean {\n        return this.translation[key] !== undefined;\n    }\n\n    async getTranslationObj(key: string): Promise<ioBroker.StringOrTranslated> {\n        const language: (ioBroker.Languages | 'uk')[] = [\n            'en',\n            'de',\n            'ru',\n            'pt',\n            'nl',\n            'fr',\n            'it',\n            'es',\n            'pl',\n            'uk',\n            'zh-cn',\n        ];\n        const result: { [key: string]: string } = {};\n        for (const l of language) {\n            try {\n                const i = await import(`../../admin/i18n/${l}/translations.json`);\n                if (i[key] !== undefined) {\n                    result[l as string] = i[key];\n                }\n            } catch {\n                return key;\n            }\n        }\n        if (result.en == undefined) {\n            return key;\n        }\n        return result as ioBroker.StringOrTranslated;\n    }\n\n    async setLanguage(language: ioBroker.Languages | 'uk', force = false): Promise<boolean> {\n        if (!language) {\n            language = 'en';\n        }\n        if (force || this.language != language) {\n            try {\n                this.translation = await import(`../../admin/i18n/${language}/translations.json`);\n                this.language = language;\n                return true;\n            } catch {\n                this.log.error(`Language ${language} not exist!`);\n            }\n        }\n        return false;\n    }\n    sortText(text: string[]): string[] {\n        text.sort((a, b) => {\n            const nameA = a.toUpperCase(); // ignore upper and lowercase\n            const nameB = b.toUpperCase(); // ignore upper and lowercase\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n\n            return 0;\n        });\n        return text;\n    }\n    /**\n     *\n     * @param text string to replace a Date\n     * @param noti appendix to translation key\n     * @param day true = Mo, 12.05 - false = 12.05\n     * @returns Monday first March\n     */\n    convertSpeakDate(text: string, noti: string = '', day = false): string {\n        if (!text || typeof text !== `string`) {\n            return ``;\n        }\n        const b = text.split(`.`);\n        if (day) {\n            b[0] = b[0].split(' ')[2];\n        }\n        return ` ${`${new Date(`${b[1]}/${b[0]}/${new Date().getFullYear()}`).toLocaleString(this.language, {\n            weekday: day ? 'long' : undefined,\n            day: 'numeric',\n            month: `long`,\n        })} `.replace(/([0-9]+\\.)/gu, x => {\n            const result = this.getTranslation(x + noti);\n            if (result != x + noti) {\n                return result;\n            }\n            return this.getTranslation(x);\n        })}`;\n    }\n}\n\nexport async function sleep(time: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\n"],
  "mappings": "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",
  "names": ["_fs", "jsonata"]
}
