{
  "version": 3,
  "sources": ["../../src/lib/messages.ts"],
  "sourcesContent": ["import WeatherWarnings from '../main';\nimport { statesObjectsWarnings } from './def/definitionen';\nimport * as MessageType from './def/messages-def';\nimport * as NotificationType from './def/notificationService-def';\nimport { messageFilterType } from './def/provider-def';\nimport { BaseClass, Library } from './library';\nimport * as Provider from './def/provider-def';\n\ntype ChangeTypeOfKeys<Obj, newKey> = Obj extends object\n    ? { [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], newKey> }\n    : newKey;\n\nexport type customformatedKJDef = ChangeTypeOfKeys<MessageType.customFormatedKeysDef, customFormatedKDefSub>;\nexport type customFormatedKInit =\n    | ChangeTypeOfKeys<MessageType.customFormatedKeysDef, string | number | undefined>\n    | undefined;\nexport type customFormatedKR = ChangeTypeOfKeys<MessageType.customFormatedKeysDef, string | number | undefined>;\n\ntype customFormatedKDefSub = { cmd?: messageCmdType; node: string };\ntype messageCmdType = 'dayoftheweek' | 'translate' | 'dayoftheweekshort' | 'countdown';\n/**\n * bla\n */\nexport class MessagesClass extends BaseClass {\n    provider: Provider.ProviderClassType | null;\n    providerController: Provider.ProviderController;\n    library: Library;\n    private formatedKeysJsonataDefinition: customformatedKJDef = {};\n    formatedData: customFormatedKInit;\n    rawWarning: any;\n    /** message is a new message */\n    newMessage: boolean = true;\n    /** message got a update lately */\n    updated: boolean = false;\n    /**Indicate if message is marked for remove. */\n    notDeleted: boolean = true;\n    templates: ioBroker.AdapterConfig['templateTable'];\n    messages: { message: string; key: string }[] = [];\n    starttime = 1;\n    endtime = 1;\n    ceiling = 0;\n    altitude = 0;\n    level = 0;\n    type = 0;\n    cache: { messages: { [key: string]: NotificationType.MessageType }; ts: number } = {\n        messages: {},\n        ts: 0,\n    };\n    genericType: keyof MessageType.genericWarntypeType = 1;\n    /** jsonata/typscript cmd to gather data from warning json */\n    formatedKeyCommand: { [key: string]: Required<customformatedKJDef> } = {\n        dwdService: {\n            starttime: {\n                node: `$fromMillis($toMillis(ONSET),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis($toMillis(ONSET),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis($toMillis(EXPIRES),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis($toMillis(EXPIRES),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `ONSET`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `HEADLINE` },\n            description: { node: `DESCRIPTION` },\n            weathertext: { node: `` },\n            ceiling: { node: `$floor(CEILING * 0.3048)` },\n            altitude: { node: `$floor(ALTITUDE * 0.3048)` },\n            warnlevelcolorhex: {\n                node: `($temp := $lookup(${JSON.stringify(\n                    MessageType.dwdLevel,\n                )},$lowercase(SEVERITY));$lookup(${JSON.stringify(MessageType.color.generic)},$string($temp)))`,\n            },\n            warnlevelcolorname: {\n                node: `($temp := $lookup(${JSON.stringify(\n                    MessageType.dwdLevel,\n                )},$lowercase(SEVERITY));$lookup(${JSON.stringify(MessageType.color.textGeneric)},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelname: {\n                node: `($temp := $lookup(${JSON.stringify(\n                    MessageType.dwdLevel,\n                )},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    MessageType.textLevels.textGeneric,\n                )},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$lookup(${JSON.stringify(MessageType.dwdLevel)},$lowercase(SEVERITY))`,\n            },\n\n            warntypename: {\n                node: `$lookup(${JSON.stringify(MessageType.warnTypeName.dwdService)}, $string(EC_II))`,\n                cmd: 'translate',\n            },\n            location: { node: `AREADESC` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            instruction: {\n                cmd: undefined,\n                node: 'INSTRUCTION',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `ONSET`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: 'countdown',\n                node: '$toMillis(ONSET)',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n\n        uwzService: {\n            starttime: {\n                node: `$fromMillis(dtgStart * 1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis(dtgStart * 1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis(dtgEnd * 1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis(dtgEnd * 1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `dtgStart * 1000`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `dtgEnd * 1000`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `payload.translationsShortText` },\n            description: { node: `payload.translationsLongText` },\n            weathertext: { node: `` },\n            ceiling: { node: `payload.altMax` },\n            altitude: { node: `payload.altMin` },\n            warnlevelcolorname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(MessageType.color.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]))`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(\n                    MessageType.color.generic,\n                )},$string(($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]))))`,\n            },\n            warnlevelname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(MessageType.textLevels.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(MessageType.warnTypeName.uwzService)}, $string(type))`,\n                cmd: 'translate',\n            },\n            location: { node: `areaID` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            instruction: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `dtgStart * 1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `dtgEnd * 1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: 'countdown',\n                node: 'dtgStart * 1000',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n        zamgService: {\n            starttime: {\n                node: `$fromMillis($number(rawinfo.start)*1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis($number(rawinfo.start)*1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis($number(rawinfo.end)*1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis($number(rawinfo.end)*1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `$number(rawinfo.start)*1000`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `$number(rawinfo.end)*1000`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `text` },\n            description: { node: `auswirkungen` },\n            weathertext: { node: `meteotext` },\n            ceiling: { node: `` },\n            altitude: { node: `` },\n            warnlevelcolorname: {\n                node: `$lookup(${JSON.stringify(MessageType.color.textGeneric)},$string(rawinfo.wlevel + 1))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$string(rawinfo.wlevel + 1)`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(MessageType.color.zamgColor)},$string(rawinfo.wlevel + 1))`,\n            },\n            warnlevelname: {\n                node: `$lookup(${JSON.stringify(MessageType.textLevels.textGeneric)},$string(rawinfo.wlevel + 1))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(MessageType.warnTypeName.zamgService)},$string(rawinfo.wtype))`,\n                cmd: 'translate',\n            },\n\n            location: { node: `location` },\n            instruction: { node: `empfehlungen` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `$number(rawinfo.start)*1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `$number(rawinfo.end)*1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: 'countdown',\n                node: '$number(rawinfo.start)*1000',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n        default: {\n            starttime: { node: `` },\n            startdate: { node: `` },\n            endtime: { node: `` },\n            enddate: { node: `` },\n            startdayofweek: { node: `` },\n            enddayofweek: { node: `` },\n            headline: { node: `` },\n            description: { node: `` },\n            weathertext: { node: `` },\n            ceiling: { node: `` },\n            altitude: { node: `` },\n            warnlevelname: { node: `` },\n            warnlevelnumber: { node: `` },\n            warnlevelcolorhex: { node: `` },\n            warnlevelcolorname: { node: `` },\n            warntypename: { node: `` },\n            location: { node: `` },\n            instruction: { node: `` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                cmd: undefined,\n                node: '',\n            },\n            enddayofweekshort: {\n                cmd: undefined,\n                node: '',\n            },\n            countdown: {\n                cmd: undefined,\n                node: '',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n    };\n    constructor(\n        adapter: WeatherWarnings,\n        name: string,\n        provider: Provider.ProviderClassType | null,\n        data: object,\n        pcontroller: Provider.ProviderController,\n    ) {\n        super(adapter, name);\n\n        if (!data && provider) {\n            throw new Error(`${this.log.getName()} data is null`);\n        }\n        this.provider = provider;\n        this.library = this.adapter.library;\n        this.rawWarning = data;\n        this.templates = this.adapter.config.templateTable;\n        this.providerController = pcontroller;\n        switch (provider ? provider.service : 'default') {\n            case `dwdService`:\n            case `uwzService`:\n            case `zamgService`:\n                if (provider && provider.service) {\n                    const json = this.formatedKeyCommand[provider.service];\n                    for (const k in json) {\n                        const key = k as keyof MessageType.customFormatedKeysDef;\n                        const data = this.formatedKeyCommand[provider.service][key];\n                        this.addFormatedDefinition(key, data);\n                    }\n                }\n                break;\n            default:\n                this.formatedKeysJsonataDefinition = {\n                    starttime: { node: `` },\n                    startdate: { node: `` },\n                    endtime: { node: `` },\n                    enddate: { node: `` },\n                    startdayofweek: { node: `` },\n                    enddayofweek: { node: `` },\n                    headline: { node: `` },\n                    description: { node: `` },\n                    weathertext: { node: `` },\n                    ceiling: { node: `` }, // max h\u00F6he\n                    altitude: { node: `` }, // min h\u00F6he\n                    warnlevelname: { node: `` },\n                    warnlevelnumber: { node: `` },\n                    warnlevelcolorhex: { node: `` },\n                    warnlevelcolorname: { node: `` },\n                    warntypename: { node: `` },\n                    location: { node: `` },\n                };\n        }\n    }\n    async updateFormated(): Promise<customFormatedKR> {\n        switch (this.provider ? this.provider.service : 'default') {\n            case 'dwdService':\n                {\n                    this.starttime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(ONSET)`));\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(EXPIRES)`));\n                    this.ceiling = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(CEILING * 0.3048)`),\n                    ); // max h\u00F6he\n                    this.altitude = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(ALTITUDE * 0.3048)`),\n                    ); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `$number($lookup(${JSON.stringify(MessageType.dwdLevel)},$lowercase(SEVERITY)))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(EC_II)`));\n                }\n                break;\n\n            case 'uwzService':\n                {\n                    this.starttime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(dtgStart * 1000)`),\n                    );\n                    this.endtime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(dtgEnd * 1000)`),\n                    );\n                    this.ceiling = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMax`)); // max h\u00F6he\n                    this.altitude = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMin`)); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                                MessageType.level.uwz,\n                            )}, $i[2]))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(type)`));\n                }\n                break;\n            case 'zamgService':\n                {\n                    this.starttime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.start)`),\n                    );\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.end)`));\n                    this.ceiling = -1;\n                    this.altitude = -1;\n                    this.level = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wlevel`));\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wtype`));\n                }\n                break;\n            default: {\n                this.starttime = 1;\n                this.endtime = 1;\n                this.ceiling = -1;\n                this.altitude = -1;\n                this.level = -1;\n                this.type = 0;\n            }\n        }\n\n        const sortedWarntypes: Required<MessageType.genericWarntypeNumberType>[] = [\n            10, 7, 2, 4, 3, 8, 9, 5, 6, 11, 12, 1,\n        ];\n        if (this.provider) {\n            for (const t in sortedWarntypes) {\n                const o = MessageType.genericWarntyp[sortedWarntypes[t]];\n                const s = this.provider.service;\n                //@ts-expect-error keine ahnung o und s sind definiert\n                if (Array.isArray(o[s]) && o[s].indexOf(this.type) != -1) {\n                    this.genericType = sortedWarntypes[t];\n                    break;\n                }\n            }\n        }\n\n        return await this.updateFormatedData(true);\n    }\n    filter(filter: messageFilterType): boolean {\n        this.type;\n        let hit = false;\n        if (filter.level && filter.level > this.level) return false;\n        for (const f in filter.type) {\n            if (\n                //@ts-expect-error dann ebenso\n                MessageType.genericWarntyp[filter.type[f]][this.provider.service].indexOf(this.type) != -1\n            ) {\n                hit = true;\n                break;\n            }\n        }\n        if (hit) return false;\n        return true;\n    }\n    //old\n    async formatMessages(): Promise<void> {\n        const templates = this.adapter.config.templateTable;\n        const messages: { message: string; key: string }[] = [];\n        if (this.formatedData) {\n            for (const a in templates) {\n                let msg: string = '';\n                while (true) {\n                    let rerun = false;\n                    const template = msg === '' ? templates[a].template : msg;\n                    if (!template) continue;\n                    const temp = template.split(/(?<!\\\\)\\${/g);\n                    msg = temp[0];\n                    for (let b = 1; temp.length > b; b++) {\n                        const t = temp[b].split(/(?<!\\\\)}/g);\n                        const key = t[0] as keyof MessageType.customFormatedKeysDef;\n                        const configTemplate = this.adapter.config.templateTable.filter((a) => a.templateKey == key);\n                        if (key[0] == '[') {\n                            const arraykey = key.split(']');\n                            arraykey[0] = arraykey[0].slice(1);\n                            if (\n                                arraykey[1] &&\n                                this.formatedData[arraykey[1] as keyof MessageType.customFormatedKeysDef] !== undefined\n                            ) {\n                                const n = this.formatedData[arraykey[1] as keyof MessageType.customFormatedKeysDef];\n\n                                if (n != '' && !Number.isNaN(n)) {\n                                    msg += arraykey[0]\n                                        .split(',')\n                                        [\n                                            this.formatedData[\n                                                arraykey[1] as keyof MessageType.customFormatedKeysDef\n                                            ] as number\n                                        ].trim();\n                                }\n                            } else {\n                                this.log.error(\n                                    `Unknown or not a number key ${arraykey[1]}  in template ${templates[a].templateKey}!`,\n                                );\n                            }\n                        } else if (configTemplate.length == 1) {\n                            msg += configTemplate[0].template;\n                            rerun = true;\n                        } else if (key && this.formatedData[key] !== undefined) msg += this.formatedData[key];\n                        else if (\n                            key &&\n                            this.formatedData[key.toLowerCase() as keyof MessageType.customFormatedKeysDef] !==\n                                undefined\n                        ) {\n                            let m = this.formatedData[key.toLowerCase() as keyof MessageType.customFormatedKeysDef];\n                            if (typeof m == 'string' && m.length > 0) {\n                                m =\n                                    m[0].toUpperCase() +\n                                    (key[key.length - 1] == key[key.length - 1].toUpperCase()\n                                        ? m.slice(1).toUpperCase()\n                                        : m.slice(1));\n                            }\n                            msg += m;\n                        } else msg += key;\n                        if (t.length > 1) msg += t[1];\n                    }\n\n                    if (!rerun) break;\n                }\n                msg = msg.replace('\\\\', '');\n                messages.push({ key: templates[a].templateKey, message: msg });\n            }\n        } else {\n            templates.forEach((a) => messages.push({ key: a.templateKey, message: a.template }));\n        }\n        this.messages = messages;\n    }\n    // new\n    async getMessage(\n        templateActions: NotificationType.ActionsUnionType[],\n        templateKey: string,\n        action: NotificationType.ActionsUnionType,\n        override: boolean = false,\n    ): Promise<NotificationType.MessageType> {\n        let msg: string = '';\n        const templates = this.adapter.config.templateTable;\n        const tempid = templates.findIndex((a) => a.templateKey == templateKey);\n        if (override) action = 'new';\n        if (\n            override || // get every message\n            (action == 'new' && this.newMessage) || // new message\n            (action == 'remove' && !this.notDeleted) || // remove message\n            (action == 'all' &&\n                templateActions.includes('all') &&\n                !templateActions.includes('new') &&\n                !templateActions.includes('remove')) // all without extension\n        ) {\n            // all messages with new/remove\n            if (this.cache.ts < Date.now() - 60000) {\n                this.updateFormated();\n            }\n            if (this.cache.messages[templateKey as string] !== undefined)\n                return this.cache.messages[templateKey as string];\n\n            if (this.formatedData) {\n                while (true) {\n                    if (tempid == -1) break;\n                    let rerun = false;\n                    const template = msg === '' ? templates[tempid].template : msg;\n                    if (!template) break;\n                    const temp = template.split(/(?<!\\\\)\\${/g);\n                    msg = temp[0];\n                    for (let b = 1; temp.length > b; b++) {\n                        const t = temp[b].split(/(?<!\\\\)}/g);\n                        const key = t[0] as keyof MessageType.customFormatedKeysDef;\n                        const configTemplate = this.adapter.config.templateTable.filter((a) => a.templateKey == key);\n                        if (key[0] == '[') {\n                            const arraykey = key.split(']');\n                            arraykey[0] = arraykey[0].slice(1);\n                            if (\n                                arraykey[1] &&\n                                this.formatedData[arraykey[1] as keyof MessageType.customFormatedKeysDef] !== undefined\n                            ) {\n                                const n = this.formatedData[arraykey[1] as keyof MessageType.customFormatedKeysDef];\n\n                                if (n != '' && !Number.isNaN(n)) {\n                                    msg += arraykey[0]\n                                        .split(',')\n                                        [\n                                            this.formatedData[\n                                                arraykey[1] as keyof MessageType.customFormatedKeysDef\n                                            ] as number\n                                        ].trim();\n                                }\n                            } else {\n                                this.log.error(\n                                    `Unknown or not a number key ${arraykey[1]}  in template ${templates[tempid].templateKey}!`,\n                                );\n                            }\n                        } else if (configTemplate.length == 1) {\n                            msg += configTemplate[0].template;\n                            rerun = true;\n                        } else if (key && this.formatedData[key] !== undefined) msg += this.formatedData[key];\n                        else if (\n                            key &&\n                            this.formatedData[key.toLowerCase() as keyof MessageType.customFormatedKeysDef] !==\n                                undefined\n                        ) {\n                            let m = this.formatedData[key.toLowerCase() as keyof MessageType.customFormatedKeysDef];\n                            if (typeof m == 'string' && m.length > 0) {\n                                m =\n                                    m[0].toUpperCase() +\n                                    (key[key.length - 1] == key[key.length - 1].toUpperCase()\n                                        ? m.slice(1).toUpperCase()\n                                        : m.slice(1));\n                            }\n                            msg += m;\n                        } else msg += key;\n                        if (t.length > 1) msg += t[1];\n                    }\n\n                    if (!rerun) break;\n                }\n\n                //messages.push({ key: templates[a].templateKey, message: msg });\n                if (tempid == -1) {\n                    this.log.error(`No template for Key: ${templateKey}!`);\n                } else {\n                    this.cache.messages[templates[tempid].templateKey as keyof typeof this.cache.messages] =\n                        this.returnMessage(msg, this.starttime, templateKey);\n                }\n                return this.returnMessage(msg, this.starttime, templateKey);\n            }\n        }\n        return this.returnMessage(msg, this.starttime, templateKey);\n    }\n    private returnMessage = (msg: string, time: number, template: string): NotificationType.MessageType => {\n        return { startts: time, text: msg.replaceAll('\\\\', ''), template: template };\n    };\n\n    async updateFormatedData(update: boolean = false): Promise<customFormatedKR> {\n        if (!this.rawWarning && !this.formatedData) {\n            throw new Error(`${this.log.getName()} error(165) rawWarning and formatedDate empty!`);\n        }\n\n        if (!this.formatedData || this.updated || update) {\n            const timeOffset =\n                (Math.floor(new Date().getTimezoneOffset() / 60) < 0 || new Date().getTimezoneOffset() % 60 < 0\n                    ? '+'\n                    : '-') +\n                ('00' + Math.abs(Math.floor(new Date().getTimezoneOffset() / 60))).slice(-2) +\n                ('00' + Math.abs(new Date().getTimezoneOffset() % 60)).slice(-2);\n            const status = this.newMessage\n                ? MessageType.status.new\n                : this.notDeleted\n                ? MessageType.status.hold\n                : MessageType.status.clear;\n            const temp: any = { status: this.library.getTranslation(status) };\n            for (const key in this.formatedKeysJsonataDefinition) {\n                const obj = this.formatedKeysJsonataDefinition[key as keyof MessageType.customFormatedKeysDef];\n                if (obj !== undefined && obj.node !== undefined) {\n                    // reset the offset because of daylight saving time\n                    const cmd = obj.node.replace(`\\${this.timeOffset}`, timeOffset);\n\n                    let result =\n                        cmd != ''\n                            ? ((await this.library.readWithJsonata(\n                                  this.rawWarning,\n                                  cmd,\n                              )) as keyof MessageType.customFormatedKeysDef)\n                            : '';\n                    if (obj.cmd !== undefined)\n                        result = (await this.readWithTypescript(\n                            result,\n                            obj.cmd,\n                        )) as keyof MessageType.customFormatedKeysDef;\n                    // Handling for uwzService translations in jsons with different Names - but onl 1 Key here.\n                    if (typeof result == 'object') {\n                        for (const a in result as object) {\n                            if (temp[key]) temp[key] += ', ';\n                            else temp[key] = '';\n                            temp[key] += result[a];\n                        }\n                    } else temp[key] = result;\n                }\n            }\n            this.formatedData = temp as MessageType.customFormatedKeysDef;\n            this.formatedData.warntypegenericname = await this.library.getTranslation(\n                MessageType.genericWarntyp[this.genericType].name,\n            );\n            this.formatedData.locationcustom = this.provider ? this.provider.customName : '';\n            this.formatedData.provider = this.provider\n                ? this.provider.service.replace('Service', '').toUpperCase()\n                : 'unknown';\n            this.updated = false;\n        }\n        if (!this.formatedData) {\n            throw new Error(`${this.log.getName()} formatedDate is empty!`);\n        }\n        this.cache.ts = Date.now();\n        this.cache.messages = {};\n        return this.formatedData;\n    }\n\n    async readWithTypescript(data: any, cmd: messageCmdType): Promise<string | number> {\n        if (!this.rawWarning && !cmd) {\n            throw new Error('readWithTypescript called without rawWarning or val!');\n        }\n        switch (cmd) {\n            case 'dayoftheweek': {\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'long',\n                });\n            }\n            case 'dayoftheweekshort': {\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'short',\n                });\n            }\n            case 'translate': {\n                return this.library.getTranslation(data);\n            }\n            case 'countdown': {\n                return this.getCountdown(data);\n            }\n        }\n        return '';\n    }\n\n    //** Update rawWanrings and dont delete message */\n    updateData(data: object): void {\n        this.rawWarning = data;\n        this.notDeleted = true;\n        this.updateFormated();\n    }\n\n    //** dont send a message and dont delete this*/\n    silentUpdate(): void {\n        this.newMessage = false;\n        this.notDeleted = true;\n    }\n\n    getCountdown(time: number): string {\n        const diff = time - Date.now();\n        const remain = new Date(Math.abs(diff));\n        const d = remain.getUTCDate() - 1;\n        const h = d > 0 ? ('00' + String(remain.getUTCHours())).slice(2) : String(remain.getUTCHours());\n        return `${diff < 0 ? '-' : ''}${d > 0 ? `${String(d)}:` : ''}${h}:${(\n            '00' + String(remain.getUTCMinutes())\n        ).slice(-2)}`;\n    }\n    delete(): void {\n        this.notDeleted = false;\n        this.newMessage = false;\n        this.updated = false;\n    }\n    async writeFormatedKeys(index: number): Promise<void> {\n        if (this.notDeleted) {\n            if (this.provider)\n                this.library.writeFromJson(\n                    `${this.provider.name}.formatedKeys.${('00' + index.toString()).slice(-2)}`,\n                    `allService.formatedkeys`,\n                    statesObjectsWarnings,\n                    this.formatedData,\n                );\n        }\n    }\n    addFormatedDefinition(key: keyof customformatedKJDef, arg: customFormatedKDefSub | undefined): void {\n        if (arg === undefined) return;\n        if (!this.formatedKeysJsonataDefinition) this.formatedKeysJsonataDefinition = {};\n        this.formatedKeysJsonataDefinition[key] = arg;\n    }\n    //async init(msg: any): Promise<void> {}\n}\n"],
  "mappings": "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",
  "names": ["data", "a"]
}
