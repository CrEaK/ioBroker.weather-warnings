{
  "version": 3,
  "sources": ["../../src/lib/messages.ts"],
  "sourcesContent": ["import WeatherWarnings from '../main';\nimport { genericStateObjects, statesObjectsWarnings } from './def/definitionen';\nimport {\n    textLevels,\n    warnTypeName,\n    dwdLevel,\n    level,\n    color,\n    customFormatedKeysDef,\n    genericWarntyp,\n    genericWarntypeType,\n} from './def/messages-def';\nimport { notificationServiceBaseType } from './def/notificationService-def';\nimport { messageFilterType } from './def/provider-def';\nimport { BaseClass, Library } from './library';\nimport { ProvideClassType } from './provider';\n\ntype ChangeTypeOfKeys<Obj, newKey> = Obj extends object\n    ? { [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], newKey> }\n    : newKey;\n\nexport type customformatedKeysJsonataDefinition = ChangeTypeOfKeys<customFormatedKeysDef, customFormatedKeysDefSubtype>;\nexport type customFormatedKeysInit = ChangeTypeOfKeys<customFormatedKeysDef, string | number | undefined> | undefined;\nexport type customFormatedKeysResult = ChangeTypeOfKeys<customFormatedKeysDef, string | number | undefined>;\n\ntype customFormatedKeysDefSubtype = { cmd?: 'dayoftheweek' | 'translate'; node: string };\n\n/**\n * bla\n */\nexport class Messages extends BaseClass {\n    provider: ProvideClassType;\n    library: Library;\n    formatedKeysJsonataDefinition: customformatedKeysJsonataDefinition = {};\n    formatedData: customFormatedKeysInit;\n    rawWarning: any;\n    /** message is a new message */\n    newMessage: boolean = true;\n    /** message got a update lately */\n    updated: boolean = false;\n    /**Indicate if message is marked for remove. */\n    notDeleted: boolean = true;\n    templates: ioBroker.AdapterConfig['templateTable'];\n    messages: { message: string; key: string }[] = [];\n    starttime = 1;\n    endtime = 1;\n    ceiling = 0;\n    altitude = 0;\n    level = 0;\n    type = 0;\n    genericType: keyof genericWarntypeType = 1;\n    /** jsonata/typscript cmd to gather data from warning json */\n    formatedKeyCommand: { [key: string]: customformatedKeysJsonataDefinition } = {\n        dwdService: {\n            starttime: { node: `$fromMillis($toMillis(ONSET),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")` },\n            startdate: { node: `$fromMillis($toMillis(ONSET),\"[D01].[M01]\",\"\\${this.timeOffset}\")` },\n            endtime: { node: `$fromMillis($toMillis(EXPIRES),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")` },\n            enddate: { node: `$fromMillis($toMillis(EXPIRES),\"[D01].[M01]\",\"\\${this.timeOffset}\")` },\n            startdayofweek: {\n                node: `ONSET`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `HEADLINE` },\n            description: { node: `DESCRIPTION` },\n            weathertext: { node: `` },\n            ceiling: { node: `$floor(CEILING * 0.3048)` }, // max h\u00F6he\n            altitude: { node: `$floor(ALTITUDE * 0.3048)` }, // min h\u00F6he\n            warnlevelcolorhex: {\n                node: `($temp := $lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    color.generic,\n                )},$string($temp)))`,\n            }, // RGB im Hexformat\n            warnlevelcolorname: {\n                node: `($temp := $lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    color.textGeneric,\n                )},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelname: {\n                node: `($temp := $lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    textLevels.textGeneric,\n                )},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: { node: `$lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY))` },\n\n            warntypename: {\n                node: `$lookup(${JSON.stringify(warnTypeName.dwdService)}, $string(EC_II))`,\n                cmd: 'translate',\n            },\n            location: { node: `AREADESC` },\n        },\n\n        uwzService: {\n            starttime: { node: `$fromMillis(dtgStart,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")` },\n            startdate: { node: `$fromMillis(dtgStart,\"[D01].[M01]\",\"\\${this.timeOffset}\")` },\n            endtime: { node: `$fromMillis(dtgEnd,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")` },\n            enddate: { node: `$fromMillis(dtgEnd,\"[D01].[M01]\",\"\\${this.timeOffset}\")` },\n            startdayofweek: {\n                node: `dtgStart`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `dtgEnd`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `payload.translationsShortText` },\n            description: { node: `payload.translationsLongText` },\n            weathertext: { node: `` },\n            ceiling: { node: `payload.altMax` }, // max h\u00F6he\n            altitude: { node: `payload.altMin` }, // min h\u00F6he\n            warnlevelcolorname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(color.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]))`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(\n                    color.generic,\n                )},$string(($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]))))`,\n            },\n            warnlevelname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(textLevels.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(warnTypeName.uwzService)}, $string(type))`,\n                cmd: 'translate',\n            },\n            location: { node: `areaID` },\n        },\n        zamgService: {\n            starttime: { node: `$fromMillis($number(rawinfo.start),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")` },\n            startdate: { node: `$fromMillis($number(rawinfo.start),\"[D01].[M01]\",\"\\${this.timeOffset}\")` },\n            endtime: { node: `$fromMillis($number(rawinfo.end),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")` },\n            enddate: { node: `$fromMillis($number(rawinfo.end),\"[D01].[M01]\",\"\\${this.timeOffset}\")` },\n            startdayofweek: {\n                node: `$number(rawinfo.start)`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `$number(rawinfo.end)`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `text` },\n            description: { node: `auswirkungen` },\n            weathertext: { node: `meteotext` },\n            ceiling: { node: `` }, // max h\u00F6he\n            altitude: { node: `` }, // min h\u00F6he\n            warnlevelcolorname: {\n                node: `$lookup(${JSON.stringify(color.textGeneric)},$string(rawinfo.wlevel))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$string(rawinfo.wlevel)`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(color.zamgColor)},$string(rawinfo.wlevel))`,\n            },\n            warnlevelname: {\n                node: `$lookup(${JSON.stringify(textLevels.textGeneric)},$string(rawinfo.wlevel))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(warnTypeName.zamgService)},$string(rawinfo.wtype))`,\n                cmd: 'translate',\n            },\n            location: { node: `location` },\n            instruction: { node: `empfehlungen` },\n        },\n        default: {\n            starttime: { node: `` },\n            startdate: { node: `` },\n            endtime: { node: `` },\n            enddate: { node: `` },\n            startdayofweek: { node: `` },\n            enddayofweek: { node: `` },\n            headline: { node: `` },\n            description: { node: `` },\n            weathertext: { node: `` },\n            ceiling: { node: `` }, // max h\u00F6he\n            altitude: { node: `` }, // min h\u00F6he\n            warnlevelname: { node: `` },\n            warnlevelnumber: { node: `` },\n            warnlevelcolorhex: { node: `` },\n            warnlevelcolorname: { node: `` },\n            warntypename: { node: `` },\n            location: { node: `` },\n            instruction: { node: `` },\n        },\n    };\n    constructor(adapter: WeatherWarnings, name: string, provider: ProvideClassType, data: object) {\n        super(adapter, name);\n\n        if (provider === null) {\n            throw new Error(`${this.log.getName()} provider is null`);\n        }\n        if (!data) {\n            throw new Error(`${this.log.getName()} data is null`);\n        }\n\n        this.provider = provider;\n        this.library = this.adapter.library;\n        this.rawWarning = data;\n        this.templates = this.adapter.config.templateTable;\n\n        switch (provider.service) {\n            case `dwdService`:\n            case `uwzService`:\n            case `zamgService`:\n                const json = this.formatedKeyCommand[provider.service];\n                for (const k in json) {\n                    const key = k as keyof customFormatedKeysDef;\n                    const data = this.formatedKeyCommand[provider.service][key];\n                    this.addFormatedDefinition(key, data);\n                }\n                break;\n            default:\n                this.formatedKeysJsonataDefinition = {\n                    starttime: { node: `` },\n                    startdate: { node: `` },\n                    endtime: { node: `` },\n                    enddate: { node: `` },\n                    startdayofweek: { node: `` },\n                    enddayofweek: { node: `` },\n                    headline: { node: `` },\n                    description: { node: `` },\n                    weathertext: { node: `` },\n                    ceiling: { node: `` }, // max h\u00F6he\n                    altitude: { node: `` }, // min h\u00F6he\n                    warnlevelname: { node: `` },\n                    warnlevelnumber: { node: `` },\n                    warnlevelcolorhex: { node: `` },\n                    warnlevelcolorname: { node: `` },\n                    warntypename: { node: `` },\n                    location: { node: `` },\n                };\n        }\n    }\n    async init(): Promise<customFormatedKeysResult> {\n        switch (this.provider.service) {\n            case 'dwdService':\n                {\n                    this.starttime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(ONSET)`));\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(EXPIRES)`));\n                    this.ceiling = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(CEILING * 0.3048)`),\n                    ); // max h\u00F6he\n                    this.altitude = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(ALTITUDE * 0.3048)`),\n                    ); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `$number($lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY)))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(EC_II)`));\n                }\n                break;\n\n            case 'uwzService':\n                {\n                    this.starttime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(dtgStart)`));\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(dtgEnd)`));\n                    this.ceiling = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMax`)); // max h\u00F6he\n                    this.altitude = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMin`)); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                                level.uwz,\n                            )}, $i[2]))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(type)`));\n                }\n                break;\n            case 'zamgService':\n                {\n                    this.starttime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.start)`),\n                    );\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.end)`));\n                    this.ceiling = -1;\n                    this.altitude = -1;\n                    this.level = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wlevel`));\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wtype`));\n                }\n                break;\n            default: {\n                this.starttime = 1;\n                this.endtime = 1;\n                this.ceiling = -1;\n                this.altitude = -1;\n                this.level = -1;\n                this.type = 0;\n            }\n        }\n\n        for (const t in genericWarntyp) {\n            const o = genericWarntyp[Number(t) as keyof genericWarntypeType];\n            const s = this.provider.service;\n            //@ts-expect-error keine ahnung o und s sind definiert\n            if (Array.isArray(o[s]) && o[s].indexOf(this.type) != -1) {\n                this.genericType = Number(t) as keyof genericWarntypeType;\n                break;\n            }\n        }\n\n        return await this.updateFormatedData(true);\n    }\n    filter(filter: messageFilterType): boolean {\n        this.type;\n        let hit = false;\n        if (filter.level && filter.level > this.level) return false;\n        for (const f in filter.type) {\n            //if (this.provider.service || genericWarntyp[typ][this.provider.service] == undefined) continue;\n            //@ts-expect-error dann ebenso\n            if (genericWarntyp[filter.type[f]][this.provider.service].indexOf(this.type) != -1) {\n                hit = true;\n                break;\n            }\n        }\n        if (hit) return false;\n        return true;\n    }\n    async formatMessages(): Promise<void> {\n        if (!this.formatedData) return;\n        const templates = this.adapter.config.templateTable;\n        const messages: { message: string; key: string }[] = [];\n        for (const a in templates) {\n            const template = templates[a].template;\n            if (!template) continue;\n            const temp = template.split('${');\n            let msg: string = temp[0];\n            for (let b = 1; temp.length > b; b++) {\n                const token = temp[b];\n                const t = token.split('}');\n                const key = t[0] as keyof customFormatedKeysDef;\n                if (key && this.formatedData[key] !== undefined) msg += this.formatedData[key];\n                else if (key && this.formatedData[key.toLowerCase() as keyof customFormatedKeysDef] !== undefined) {\n                    let m = this.formatedData[key.toLowerCase() as keyof customFormatedKeysDef];\n                    if (typeof m == 'string' && m.length > 0) {\n                        m =\n                            m[0].toUpperCase() +\n                            (key[key.length - 1] == key[key.length - 1].toUpperCase()\n                                ? m.slice(1).toUpperCase()\n                                : m.slice(1));\n                    }\n                    msg += m;\n                } else msg += key;\n                if (t.length > 1) msg += t[1];\n            }\n            messages.push({ key: templates[a].templateKey, message: msg });\n        }\n        this.messages = messages;\n    }\n\n    async updateFormatedData(update: boolean = false): Promise<customFormatedKeysResult> {\n        if (!this.rawWarning && !this.formatedData) {\n            throw new Error(`${this.log.getName()} rawWarning and formatedDate empty!`);\n        }\n        if (!this.formatedData || this.updated || update) {\n            const timeOffset =\n                (Math.floor(new Date().getTimezoneOffset() / 60) < 0 || new Date().getTimezoneOffset() % 60 < 0\n                    ? '+'\n                    : '-') +\n                ('00' + Math.abs(Math.floor(new Date().getTimezoneOffset() / 60))).slice(-2) +\n                ('00' + Math.abs(new Date().getTimezoneOffset() % 60)).slice(-2);\n            const temp: any = {};\n            for (const key in this.formatedKeysJsonataDefinition) {\n                const obj = this.formatedKeysJsonataDefinition[key as keyof customFormatedKeysDef];\n                if (obj !== undefined && obj.node !== undefined) {\n                    // reset the offset because of daylight saving time\n                    const cmd = obj.node.replace(`\\${this.timeOffset}`, timeOffset);\n\n                    let result = (await this.library.readWithJsonata(\n                        this.rawWarning,\n                        cmd,\n                    )) as keyof customFormatedKeysDef;\n                    if (obj.cmd !== undefined)\n                        result = (await this.readWithTypescript(result, obj.cmd)) as keyof customFormatedKeysDef;\n                    // Handling for uwzService translations in jsons with different Names - but onl 1 Key here.\n                    if (typeof result == 'object') {\n                        for (const a in result as object) {\n                            if (temp[key]) temp[key] += ', ';\n                            else temp[key] = '';\n                            temp[key] += result[a];\n                        }\n                    } else temp[key] = result;\n                }\n            }\n            this.formatedData = temp as customFormatedKeysDef;\n            this.updated = false;\n        }\n        if (!this.formatedData) {\n            throw new Error(`${this.log.getName()} formatedDate is empty!`);\n        }\n        return this.formatedData;\n    }\n    async readWithTypescript(data: any, cmd: string): Promise<string | number> {\n        if (!this.rawWarning && !cmd) {\n            throw new Error('readWithTypescript called without rawWarning or val!');\n        }\n        switch (cmd) {\n            case 'dayoftheweek': {\n                return new Date(data as string | number | Date).toLocaleDateString('de-DE', { weekday: 'long' });\n            }\n            case 'translate': {\n                return this.library.getTranslation(data);\n            }\n        }\n        return '';\n    }\n    //** Update rawWanrings and dont delete message */\n    updateData(data: object): void {\n        this.rawWarning = data;\n        this.notDeleted = true;\n    }\n    //** dont send a message and dont delete this*/\n    silentUpdate(): void {\n        this.newMessage = false;\n        this.notDeleted = true;\n    }\n    async sendMessage(override = false): Promise<boolean> {\n        if (this.messages.length == 0) return false;\n        if (this.notDeleted) {\n            if (this.newMessage || override) {\n                for (let a = 0; a < this.messages.length; a++) {\n                    const msg = this.messages[a];\n                    this.library.writedp(\n                        `${this.provider.name}.messages.${msg.key}`,\n                        msg.message,\n                        genericStateObjects.messageStates.message,\n                    );\n                }\n            }\n        } else {\n            this.sendRemoveMessage();\n            return true;\n        }\n\n        this.newMessage = false;\n        return false;\n    }\n    sendRemoveMessage(): void {\n        // Sende aufgehoben meldung wird nur aufgerufen wenn Mitteilungen vorhanden sind\n    }\n\n    delete(): void {\n        this.notDeleted = false;\n        this.newMessage = false;\n        this.updated = false;\n    }\n    async writeFormatedKeys(index: number): Promise<void> {\n        if (this.notDeleted) {\n            this.library.writeFromJson(\n                `${this.provider.name}.formatedKeys.${('00' + index.toString()).slice(-2)}`,\n                `allService.formatedkeys`,\n                statesObjectsWarnings,\n                this.formatedData,\n            );\n        }\n    }\n    addFormatedDefinition(\n        key: keyof customformatedKeysJsonataDefinition,\n        arg: customFormatedKeysDefSubtype | undefined,\n    ): void {\n        if (arg === undefined) return;\n        if (!this.formatedKeysJsonataDefinition) this.formatedKeysJsonataDefinition = {};\n        this.formatedKeysJsonataDefinition[key] = arg;\n    }\n    //async init(msg: any): Promise<void> {}\n}\nexport class NotificationClass extends BaseClass {\n    options: notificationServiceBaseType;\n    constructor(adapter: WeatherWarnings, notifcationOptions: notificationServiceBaseType) {\n        super(adapter, notifcationOptions.name);\n        this.options = notifcationOptions;\n    }\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
