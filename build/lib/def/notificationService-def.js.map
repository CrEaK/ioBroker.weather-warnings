{
  "version": 3,
  "sources": ["../../../src/lib/def/notificationService-def.ts"],
  "sourcesContent": ["import { MessagesClass } from '../messages';\nimport * as NotificationType from './notificationService-def';\nimport { ProviderClassType, messageFilterType, providerServices } from './provider-def';\n\nexport type Type = Required<keyof OptionsType>;\nexport type OptionsType = {\n    telegram?: {\n        name: 'telegram';\n    } & BaseType;\n    pushover?: {\n        name: 'pushover';\n    } & BaseType;\n    whatsapp?: {\n        name: 'whatsapp';\n    } & BaseType;\n    json?: {\n        name: 'json';\n    } & BaseType;\n    history?: {\n        name: 'history';\n    } & BaseType;\n    email?: {\n        name: 'email';\n    } & BaseType;\n    alexa2?: {\n        name: 'alexa2';\n    } & BaseType;\n};\n\nexport type BaseType =\n    | ({\n          name: 'telegram';\n          userid: string;\n          chatid: string;\n          withNoSound: boolean;\n      } & bBaseType)\n    | ({\n          name: 'pushover';\n          headline: string;\n          sound: string;\n          priority: boolean;\n          device: string;\n      } & bBaseType)\n    | ({\n          name: 'whatsapp';\n          phonenumber: string;\n      } & bBaseType)\n    | ({\n          name: 'json';\n      } & bBaseType)\n    | ({\n          name: 'history';\n      } & bBaseType)\n    | ({\n          name: 'email';\n      } & bBaseType)\n    | ({\n          name: 'alexa2';\n          volumen: string;\n          audio: string;\n          sounds: { warntype: string; sound: string; warntypenumber: number }[];\n          sounds_enabled: boolean;\n      } & bBaseType);\n\ntype bBaseType = {\n    service: providerServices[];\n    filter: {\n        auto: messageFilterType;\n        manual?: messageFilterType;\n    };\n    adapter: string;\n    name: Type;\n    actions: ActionsType;\n    useadapter: boolean;\n    notifications: ActionsUnionType[];\n};\n\nexport type ActionsUnionType = keyof ActionsType;\n\nexport type ActionsType = {\n    new: string;\n    remove: string;\n    removeAll: string;\n    all: string;\n    header?: string;\n    footer?: string;\n    manualAll?: string;\n};\n\nexport type ConfigType = {\n    notifications: ActionsUnionType[];\n};\n\n/**\n * new: send new messages for new Warnings\n * all: send all messages always (with new, only if a new warning comes up)\n * removeAll: send remove all messages\n * remove: send a remove message for a removed warning\n */\nexport const manual: ActionsUnionType[] = ['manualAll'];\n\nconst push: ActionsUnionType[] = [...manual, 'new', 'remove', 'removeAll'];\nconst history: ActionsUnionType[] = ['new', 'remove'];\nconst json: ActionsUnionType[] = ['all', 'removeAll'];\nconst email: ActionsUnionType[] = [...manual, 'new', 'all', 'removeAll', 'remove'];\n\n//const speak: ActionsUnionType[] = ['new', 'remove', 'removeAll'];\nexport const serciceCapabilities: Record<Type, ConfigType> = {\n    telegram: { notifications: push },\n    email: { notifications: email },\n    json: { notifications: json },\n    whatsapp: { notifications: push },\n    pushover: { notifications: push },\n    history: { notifications: history },\n    alexa2: { notifications: push },\n};\n\nexport const Array: Type[] = ['telegram', 'pushover', 'whatsapp', 'json', 'history', 'email', 'alexa2'];\n\nexport type MessageType = {\n    text: string;\n    startts: number;\n    template: string;\n    action?: keyof ActionsType;\n    provider?: ProviderClassType;\n    message?: MessagesClass;\n};\n\nexport type pushover_options = {\n    message: string;\n    title?: string;\n    device?: string;\n    sound?: string;\n    priority?: number;\n};\nexport const notificationServiceDefaults: Record<NotificationType.Type, Partial<NotificationType.BaseType>> = {\n    telegram: {\n        useadapter: true,\n    },\n    pushover: {\n        useadapter: true,\n    },\n    whatsapp: {\n        useadapter: true,\n    },\n    json: {\n        useadapter: false,\n    },\n    history: {\n        useadapter: false,\n    },\n    email: {\n        useadapter: true,\n    },\n    alexa2: {\n        useadapter: true,\n    },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmGO,MAAM,SAA6B,CAAC,WAAW;AAEtD,MAAM,OAA2B,CAAC,GAAG,QAAQ,OAAO,UAAU,WAAW;AACzE,MAAM,UAA8B,CAAC,OAAO,QAAQ;AACpD,MAAM,OAA2B,CAAC,OAAO,WAAW;AACpD,MAAM,QAA4B,CAAC,GAAG,QAAQ,OAAO,OAAO,aAAa,QAAQ;AAG1E,MAAM,sBAAgD;AAAA,EACzD,UAAU,EAAE,eAAe,KAAK;AAAA,EAChC,OAAO,EAAE,eAAe,MAAM;AAAA,EAC9B,MAAM,EAAE,eAAe,KAAK;AAAA,EAC5B,UAAU,EAAE,eAAe,KAAK;AAAA,EAChC,UAAU,EAAE,eAAe,KAAK;AAAA,EAChC,SAAS,EAAE,eAAe,QAAQ;AAAA,EAClC,QAAQ,EAAE,eAAe,KAAK;AAClC;AAEO,MAAM,QAAgB,CAAC,YAAY,YAAY,YAAY,QAAQ,WAAW,SAAS,QAAQ;AAkB/F,MAAM,8BAAiG;AAAA,EAC1G,UAAU;AAAA,IACN,YAAY;AAAA,EAChB;AAAA,EACA,UAAU;AAAA,IACN,YAAY;AAAA,EAChB;AAAA,EACA,UAAU;AAAA,IACN,YAAY;AAAA,EAChB;AAAA,EACA,MAAM;AAAA,IACF,YAAY;AAAA,EAChB;AAAA,EACA,SAAS;AAAA,IACL,YAAY;AAAA,EAChB;AAAA,EACA,OAAO;AAAA,IACH,YAAY;AAAA,EAChB;AAAA,EACA,QAAQ;AAAA,IACJ,YAAY;AAAA,EAChB;AACJ;",
  "names": []
}
