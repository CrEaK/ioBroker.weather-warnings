{
  "version": 3,
  "sources": ["../../src/lib/translations.ts"],
  "sourcesContent": ["/* Regex to get \"\" around keys ([a-zA-Z_]+): \"$1\": */\nimport _fs from 'fs';\n\nimport de from '../../admin/i18n/de/translations.json';\nimport en from '../../admin/i18n/en/translations.json';\nimport es from '../../admin/i18n/es/translations.json';\nimport fr from '../../admin/i18n/fr/translations.json';\nimport it from '../../admin/i18n/it/translations.json';\nimport pl from '../../admin/i18n/pl/translations.json';\nimport nl from '../../admin/i18n/nl/translations.json';\nimport pt from '../../admin/i18n/pt/translations.json';\nimport ru from '../../admin/i18n/ru/translations.json';\nimport uk from '../../admin/i18n/uk/translations.json';\nimport zh from '../../admin/i18n/zh-cn/translations.json';\ntype allTranslationsType = {\n    de: { [key: string]: string };\n    en: { [key: string]: string };\n    es: { [key: string]: string };\n    fr: { [key: string]: string };\n    it: { [key: string]: string };\n    pl: { [key: string]: string };\n    nl: { [key: string]: string };\n    pt: { [key: string]: string };\n    ru: { [key: string]: string };\n    uk: { [key: string]: string };\n    'zh-cn': { [key: string]: string };\n};\n\ntype translationsType = {\n    de?: string;\n    en?: string;\n    es?: string;\n    fr?: string;\n    it?: string;\n    pl?: string;\n    nl?: string;\n    pt?: string;\n    ru?: string;\n    uk?: string;\n    'zh-cn'?: string;\n};\nconst allTranslations: allTranslationsType = {\n    de: de,\n    en: en,\n    es: es,\n    fr: fr,\n    it: it,\n    pl: pl,\n    nl: nl,\n    pt: pt,\n    ru: ru,\n    uk: uk,\n    'zh-cn': zh,\n};\n\nexport function geti18nTranslation(key: string): string | { [key: string]: string } {\n    const result: translationsType = {};\n    if (allTranslations) {\n        for (const l in allTranslations) {\n            const ll = l as keyof translationsType;\n            if (allTranslations[ll][key] !== undefined) {\n                result[ll] = allTranslations[ll][key];\n            }\n        }\n        if (result.en !== undefined && result.en !== '') return result;\n    }\n    return '';\n}\n\nexport function seti18nTranslation(key: string, val: string | { [key: string]: string }): void {\n    if (!key || !val) return;\n    if (allTranslations.en[key] !== undefined && allTranslations.en[key] !== '') return;\n    if (typeof val == 'object') {\n        for (const l in allTranslations) {\n            allTranslations[l as keyof translationsType][key] = val[l];\n        }\n    } else {\n        allTranslations.en[key] = val;\n    }\n}\n\n//** save to file deactivate for upload */\nexport async function writei18nTranslation(): Promise<void> {\n    return;\n    if (await _fs.existsSync('./.dev-data')) {\n        // only use it on my iobroker dev-server\n        if (!(await _fs.existsSync('./admin/i18n'))) await _fs.mkdirSync('./admin/i18n');\n        if (!(await _fs.existsSync('./admin/i18n/en'))) await _fs.mkdirSync('./admin/i18n/en');\n        //if (!(await _fs.existsSync('./admin/i18n/de'))) await _fs.mkdirSync('./admin/i18n/de');\n        await _fs.writeFileSync('./admin/i18n/en/translations.json', JSON.stringify(allTranslations.en));\n        //await _fs.writeFileSync('./admin/i18n/de/translations.json', JSON.stringify(allTranslations.de));\n    }\n}\n\nexport async function writefile(name: string, value: object): Promise<void> {\n    if (await _fs.existsSync('./.dev-data')) {\n        // only use it on my iobroker dev-server\n        return;\n        await _fs.writeFileSync('./.dev-data/' + name + '.json', JSON.stringify(value));\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAgB;AAEhB,0BAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,uBAAe;AACf,IAAAA,wBAAe;AACf,IAAAA,wBAAe;AA4Bf,MAAM,kBAAuC;AAAA,EACzC,IAAI,oBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,qBAAAC;AAAA,EACJ,IAAI,sBAAAC;AAAA,EACJ,SAAS,sBAAAC;AACb;AAEO,SAAS,mBAAmB,KAAiD;AAChF,QAAM,SAA2B,CAAC;AAClC,MAAI,iBAAiB;AACjB,eAAW,KAAK,iBAAiB;AAC7B,YAAM,KAAK;AACX,UAAI,gBAAgB,IAAI,SAAS,QAAW;AACxC,eAAO,MAAM,gBAAgB,IAAI;AAAA,MACrC;AAAA,IACJ;AACA,QAAI,OAAO,OAAO,UAAa,OAAO,OAAO;AAAI,aAAO;AAAA,EAC5D;AACA,SAAO;AACX;AAEO,SAAS,mBAAmB,KAAa,KAA+C;AAC3F,MAAI,CAAC,OAAO,CAAC;AAAK;AAClB,MAAI,gBAAgB,GAAG,SAAS,UAAa,gBAAgB,GAAG,SAAS;AAAI;AAC7E,MAAI,OAAO,OAAO,UAAU;AACxB,eAAW,KAAK,iBAAiB;AAC7B,sBAAgB,GAA6B,OAAO,IAAI;AAAA,IAC5D;AAAA,EACJ,OAAO;AACH,oBAAgB,GAAG,OAAO;AAAA,EAC9B;AACJ;AAGA,eAAsB,uBAAsC;AACxD;AACA,MAAI,MAAM,UAAAC,QAAI,WAAW,aAAa,GAAG;AAErC,QAAI,CAAE,MAAM,UAAAA,QAAI,WAAW,cAAc;AAAI,YAAM,UAAAA,QAAI,UAAU,cAAc;AAC/E,QAAI,CAAE,MAAM,UAAAA,QAAI,WAAW,iBAAiB;AAAI,YAAM,UAAAA,QAAI,UAAU,iBAAiB;AAErF,UAAM,UAAAA,QAAI,cAAc,qCAAqC,KAAK,UAAU,gBAAgB,EAAE,CAAC;AAAA,EAEnG;AACJ;AAEA,eAAsB,UAAU,MAAc,OAA8B;AACxE,MAAI,MAAM,UAAAA,QAAI,WAAW,aAAa,GAAG;AAErC;AACA,UAAM,UAAAA,QAAI,cAAc,iBAAiB,OAAO,SAAS,KAAK,UAAU,KAAK,CAAC;AAAA,EAClF;AACJ;",
  "names": ["import_translations", "de", "en", "es", "fr", "it", "pl", "nl", "pt", "ru", "uk", "zh", "_fs"]
}
