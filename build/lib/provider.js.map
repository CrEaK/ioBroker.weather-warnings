{
  "version": 3,
  "sources": ["../../src/lib/provider.ts"],
  "sourcesContent": ["// Provider\n\nimport axios from 'axios';\nimport WeatherWarnings from '../main';\nimport { PROVIDER_OPTIONS, genericStateObjects, statesObjectsWarnings } from './def/definitionen';\nimport { BaseClass, Library } from './library';\nimport {\n    DataImportType,\n    dataImportDwdType,\n    dataImportUWZType,\n    dataImportZamgType,\n    messageFilterType,\n    providerServices,\n} from './def/provider-def';\nimport { Messages } from './messages';\nimport { getTestData } from './test-warnings';\nimport { notificationServiceOptionsType } from './def/notificationService-def';\nimport { genericWarntyp, genericWarntypeAlertJsonType, genericWarntypeType } from './def/messages-def';\n\ntype ProvideOptionsTypeInternal = {\n    service: providerServices;\n    warncellId: string | [string, string];\n    providerController: ProviderController;\n    language: string;\n} & (StringProvideOptionsType | CoordinateProvideOptionsType);\n\ntype ProvideOptionsType = ProvideOptionsTypeInternal;\n\ntype StringProvideOptionsType = BaseProviderOptionsType & {\n    warncellId: string;\n};\ntype CoordinateProvideOptionsType = BaseProviderOptionsType & {\n    warncellId: [string, string];\n};\ntype BaseProviderOptionsType = {\n    providerController: ProviderController;\n    language: string;\n    filter: messageFilterType;\n};\n\n/** Base class for every provider */\nclass BaseProvider extends BaseClass {\n    service: providerServices;\n    url: string = '';\n    warncellId: string | Array<string> = '';\n    rawData: DataImportType = null;\n    library: Library;\n    messages: Messages[] = [];\n    providerController: ProviderController;\n    filter: messageFilterType;\n\n    constructor(adapter: WeatherWarnings, options: ProvideOptionsTypeInternal, name: string) {\n        super(adapter, 'provider.' + name);\n        this.service = options.service;\n        this.library = this.adapter.library;\n        this.providerController = options.providerController;\n        this.setService(options.service);\n        this.log.setLogPrefix(`${name}-${options.warncellId}`);\n        this.filter = options.filter;\n        this.init();\n    }\n    async init(): Promise<void> {\n        this.library.writedp(`${this.name}.info`, undefined, genericStateObjects.info._channel);\n        this.library.writedp(`${this.name}.messages`, undefined, genericStateObjects.messageStates._channel);\n        this.library.writedp(`${this.name}.formatedKeys`, undefined, genericStateObjects.formatedKeysDevice);\n\n        this.setConnected(false);\n    }\n\n    delete(): void {\n        this.rawData = null;\n        this.setConnected(false);\n    }\n\n    getService(): providerServices {\n        if (!this.service) {\n            throw new Error(`baseProvider.getService service is ${this.service == '' ? `''` : `undefined`}`);\n        }\n        return this.service;\n    }\n    /*getStatesObjectsWarnings(key: string): { [key: string]: ioBroker.Object } {\n        return statesObjectsWarnings[this.service][key];\n    }*/\n\n    setService(service: providerServices): boolean {\n        if (\n            !service ||\n            ['dwdService', 'zamgService', 'uwzService', 'ninaService', 'metroService'].indexOf(service) === -1\n        ) {\n            throw new Error(`baseProvider.setService service ${service} is unknowed!`);\n        }\n        this.service = service;\n        return true;\n    }\n\n    /**\n     * @param url if '' url from PROVIDER_OPTIONS is taken\n     * @param keys [string] values to replace - placeholder #  # #+  +# #++  ++# and so on\n     */\n    setUrl(url: string = '', keys: string[]): string {\n        if (!url) {\n            this.url = PROVIDER_OPTIONS[this.service]['url'];\n        } else {\n            this.url = url;\n        }\n        let placeholder = '#  #';\n        for (const k in keys) {\n            this.url = this.url.replace(placeholder, keys[k]);\n            placeholder = placeholder.slice(0, 1) + '+' + placeholder.slice(1, -1) + '+' + placeholder.slice(-1);\n        }\n        return this.url;\n    }\n    async setConnected(status: boolean): Promise<void> {\n        this.providerController.connection = this.providerController.connection || status;\n        const objDef = await this.library.getObjectDefFromJson(`info.connection`, genericStateObjects);\n        this.library.writedp(`${this.name}.info.connection`, !!status, objDef);\n    }\n    async update(): Promise<void> {\n        // tue nichts\n    }\n    static async setAlerts(\n        that: BaseProvider | ProviderController,\n        prefix: string,\n        data: { [key: string]: string | number | boolean },\n    ): Promise<void> {\n        await that.library.writeFromJson(prefix + '.alerts', 'allService.alerts', statesObjectsWarnings, data, false);\n    }\n    async getAlertsAndWrite(): Promise<genericWarntypeAlertJsonType> {\n        const reply: any = {};\n        for (const t in genericWarntyp) {\n            reply[genericWarntyp[Number(t) as keyof genericWarntypeType].id] = {\n                level: -1,\n                start: 1,\n                end: 1,\n                headline: '',\n                active: false,\n                type: -1,\n            };\n        }\n\n        if (!reply) throw new Error('error(234) reply not definied');\n        for (const a in this.messages) {\n            const m = this.messages[a];\n            if (!m) continue;\n            const name = genericWarntyp[m.genericType].id;\n            if (reply[name] === undefined) continue;\n            if (m.endtime < Date.now()) continue;\n\n            if (m.starttime < Date.now() && reply[name].level < m.level) {\n                reply[name] = {\n                    level: m.level,\n                    start: m.starttime,\n                    end: m.endtime,\n                    headline: m.formatedData !== undefined ? String(m.formatedData.headline) : '',\n                    active: m.starttime <= Date.now() && m.endtime >= Date.now(),\n                    type: -1,\n                };\n            }\n        }\n        await BaseProvider.setAlerts(this, this.name, reply);\n        return reply;\n    }\n    // General function that retrieves data\n    async getDataFromProvider(): Promise<DataImportType> {\n        if (!this.url || !this.warncellId) {\n            this.log.debug(\n                // eslint-disable-next-line prettier/prettier\n                `Warn (31) this.url: ${this.url} this.warncellid: ${this.warncellId} this.service: ${this.getService()}`,\n            );\n        }\n        try {\n            if (this.unload) {\n                return;\n            }\n\n            /*let result = await axios.get(\n                'https://feeds.meteoalarm.org/api/v1/warnings/feeds-italy/12f80051-b8f8-4c13-b31d-f960796e73a2?index_info=0&amp;index_area=0&amp;index_geocode=0',\n                //'https://feeds.meteoalarm.org/feeds/meteoalarm-legacy-atom-italy',\n            );\n            this.log.debug(result.data);\n            result = await axios.get(\n                //'https://feeds.meteoalarm.org/api/v1/warnings/feeds-italy/12f80051-b8f8-4c13-b31d-f960796e73a2?index_info=0&amp;index_area=0&amp;index_geocode=0',\n                'https://feeds.meteoalarm.org/feeds/meteoalarm-legacy-atom-italy',\n            );\n            this.log.debug('22    ' + result.data);\n            return;*/\n\n            // show text mode in Info states\n            const objDef = await this.library.getObjectDefFromJson(`info.testMode`, genericStateObjects);\n            this.library.writedp(`${this.name}.info.testMode`, this.adapter.config.useTestWarnings, objDef);\n            if (this.adapter.config.useTestWarnings) {\n                return this.library.cloneGenericObject(getTestData(this.service) as object) as DataImportType;\n            } else {\n                const result = await axios.get(this.url);\n                if (result.status == 200) {\n                    await this.setConnected(true);\n                    return typeof result.data == 'object' ? result.data : JSON.parse(result.data);\n                } else {\n                    this.log.warn('Warn(23) ' + result.statusText);\n                }\n            }\n        } catch (error) {\n            if (axios.isAxiosError(error)) {\n                this.log.warn(`Warn(21) axios error for ${this.getService()} url: ${this.url}`);\n            } else {\n                this.log.error(`Error(22) no data for ${this.getService()} from ${this.url} with Error ${error}`);\n            }\n        }\n        await this.setConnected(false);\n        return null;\n    }\n    //** Called at the end of updateData() from every childclass */\n    async finishUpdateData(): Promise<void> {\n        for (let m = 0; m < this.messages.length; m++) {\n            this.messages.sort((a, b) => {\n                return a.starttime - b.starttime;\n            });\n            await this.messages[m].writeFormatedKeys(m);\n\n            await this.messages[m].formatMessages();\n        }\n        this.library.garbageColleting(`${this.name}.formatedKeys`, (this.providerController.refreshTime || 600000) / 2);\n    }\n    /**\n     * generic write function for flat Objects\n     * @param prefix {string}   prefix in datatree\n     * @param data              json object flat\n     * @returns                 void\n     */\n    async dumpData(prefix: string, data: DataImportType): Promise<void> {\n        if (!prefix || !data || typeof data !== 'object') return;\n        for (const key in data) {\n            //@ts-expect-error write code for next line\n            this.adapter.library.writeState(`${prefix}`, key, data[key]);\n        }\n    }\n    async updateData(data: any, counter: number): Promise<void> {\n        if (!data) return;\n        this.library.writedp(`${this.name}.warning`, undefined, genericStateObjects.warningDevice);\n        await this.library.writeFromJson(\n            `${this.name}.warning.${('00' + counter.toString()).slice(-2)}`,\n            `${this.service}.raw`,\n            statesObjectsWarnings,\n            data,\n        );\n    }\n    /** Call on every message sendMessage() and removed notDelete == false messages after this. */\n    async sendMessages(override = false): Promise<void> {\n        if (this.messages.length == 0 && !override) {\n            /**\n             * All Warnings removed should be done by providercontroller.\n             */\n            return;\n        } else {\n            /**\n             * send Messages, remove old one\n             */\n            const jsonMessage: { [key: string]: string[] } = {};\n            for (const m in this.messages) {\n                const removeIt = await this.messages[m].sendMessage();\n                if (removeIt) this.messages.splice(Number(m), 1);\n                else {\n                    for (const k in this.messages[m].messages) {\n                        const key = this.messages[m].messages[k].key;\n                        const msg = this.messages[m].messages[k].message;\n                        jsonMessage[key] = jsonMessage[key] || [];\n                        jsonMessage[key].push(msg);\n                    }\n                }\n            }\n            for (const key in jsonMessage) {\n                this.library.writedp(\n                    `${this.name}.messages.${key}_array`,\n                    JSON.stringify(jsonMessage[key]),\n                    genericStateObjects.messageStates.messageJson,\n                );\n            }\n            return;\n        }\n    }\n}\n\n// nuzte klassen um Daten zu parsen\nexport class DWDProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: StringProvideOptionsType) {\n        super(adapter, { ...options, service: 'dwdService' }, `dwd`);\n        this.warncellId = options.warncellId;\n        const url =\n            PROVIDER_OPTIONS.dwdService.url_base +\n            (this.warncellId.startsWith('9') || this.warncellId.startsWith('10')\n                ? PROVIDER_OPTIONS.dwdService.url_appendix_land\n                : PROVIDER_OPTIONS.dwdService.url_appendix_town) +\n            PROVIDER_OPTIONS.dwdService.url_language;\n        this.url = this.setUrl(url, [this.warncellId, options.language]);\n    }\n    async updateData(): Promise<void> {\n        const result = (await this.getDataFromProvider()) as dataImportDwdType;\n        if (!result) return;\n        //this.log.debug(JSON.stringify(result));\n        this.log.debug(`Got ${result.totalFeatures} warnings from server`);\n        result.features.sort((a, b) => {\n            return new Date(a.properties.ONSET).getTime() - new Date(b.properties.ONSET).getTime();\n        });\n        this.messages.forEach((a) => (a.notDeleted = false));\n        for (let a = 0; a < this.adapter.numOfRawWarnings && a < result.totalFeatures; a++) {\n            const w = result.features[a];\n            if (w.properties.STATUS == 'Test') continue;\n            await super.updateData(w.properties, a);\n\n            /**\n             * filter messages dwd\n             */\n            const index = this.messages.findIndex((m) => m.rawWarning.IDENTIFIER == w.properties.IDENTIFIER);\n\n            if (index == -1) {\n                const nmessage = new Messages(this.adapter, 'dwd-msg', this, w.properties);\n                await nmessage.init();\n\n                if (nmessage && nmessage.filter(this.filter)) this.messages.push(nmessage);\n            } else {\n                this.messages[index].updateData(w.properties);\n            }\n        }\n        this.library.garbageColleting(`${this.name}.warning`);\n\n        for (const m in this.messages) {\n            const msg = this.messages[m];\n            const formatedData = await msg.updateFormatedData();\n            let breakit = false;\n            if (msg.rawWarning.MSGTYPE == 'Update') {\n                for (const m2 in this.messages) {\n                    const delMsg = this.messages[m2];\n                    if (msg === delMsg) continue;\n                    //if (delMsg.notDeleted) continue;\n                    if (delMsg.formatedData === undefined) continue; // \u00FCberfl\u00FCssig?\n                    if (delMsg.rawWarning.EC_II == msg.rawWarning.EC_II) {\n                        if (\n                            delMsg.formatedData.warnlevelnumber !== undefined &&\n                            formatedData.warnlevelnumber !== undefined &&\n                            delMsg.formatedData.warnlevelnumber <= formatedData.warnlevelnumber\n                        ) {\n                            msg.silentUpdate();\n                        }\n                        this.messages[m2].delete();\n                        this.messages.slice(Number(m2), 1);\n                        breakit = true;\n                        break;\n                    }\n                }\n            }\n            if (breakit) break;\n        }\n        /**\n         * Hier war ich dran\n         */\n        //this.library.writeJson('', '', this.rawData, this.getStatesObjectsWarnings('raw').false);\n        await this.finishUpdateData();\n    }\n}\n\nexport class ZAMGProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: CoordinateProvideOptionsType) {\n        super(adapter, { ...options, service: 'zamgService' }, `zamg`);\n        this.warncellId = options.warncellId;\n        this.setUrl('', [this.warncellId[0], this.warncellId[1], options.language]);\n    }\n\n    async updateData(): Promise<void> {\n        const result = (await this.getDataFromProvider()) as dataImportZamgType;\n        if (!result) return;\n        //this.log.debug(JSON.stringify(result));\n        if (!result.properties || !result.properties.warnings) {\n            this.log.debug(`Got 0 warnings from server`);\n            return;\n        } else this.log.debug(`Got ${result.properties.warnings.length} warnings from server`);\n        result.properties.warnings.sort((a, b) => {\n            return Number(a.properties.rawinfo.start) - Number(b.properties.rawinfo.start);\n        });\n        this.messages.forEach((a) => (a.notDeleted = false));\n        for (let a = 0; a < this.adapter.numOfRawWarnings && a < result.properties.warnings.length; a++) {\n            // special case for zamg\n            result.properties.warnings[a].properties.location = result.properties.location.properties.name;\n            result.properties.warnings[a].properties.nachrichtentyp = result.properties.warnings[a].type;\n            await super.updateData(result.properties.warnings[a].properties, a);\n\n            const index = this.messages.findIndex(\n                (m) => m.rawWarning.warnid == result.properties.warnings[a].properties.warnid,\n            );\n            if (index == -1) {\n                const nmessage = new Messages(this.adapter, 'zamg-msg', this, result.properties.warnings[a].properties);\n                await nmessage.init();\n                if (nmessage && nmessage.filter(this.filter)) this.messages.push(nmessage);\n            } else {\n                this.messages[index].updateData(result.properties.warnings[a].properties);\n            }\n        }\n        this.library.garbageColleting(`${this.name}.warning`);\n        await this.finishUpdateData();\n    }\n}\n\nexport class UWZProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: StringProvideOptionsType) {\n        super(adapter, { ...options, service: 'uwzService' }, `uwz`);\n        this.warncellId = options.warncellId.toUpperCase();\n        this.setUrl('', [this.warncellId, options.language]);\n    }\n    async updateData(): Promise<void> {\n        const result = (await this.getDataFromProvider()) as dataImportUWZType;\n        if (!result || !result.results) return;\n        result.results.sort((a, b) => {\n            return a.dtgStart - b.dtgStart;\n        });\n        this.messages.forEach((a) => (a.notDeleted = false));\n        for (let a = 0; a < this.adapter.numOfRawWarnings && a < result.results.length; a++) {\n            await super.updateData(result.results[a], a);\n\n            const index = this.messages.findIndex((m) => m.rawWarning.payload.id == result.results[a].payload.id);\n            if (index == -1) {\n                const nmessage = new Messages(this.adapter, 'uwz-msg', this, result.results[a]);\n                await nmessage.init();\n                if (nmessage && nmessage.filter(this.filter)) this.messages.push(nmessage);\n            } else {\n                this.messages[index].updateData(result.results[a]);\n            }\n        }\n        //this.log.debug(JSON.stringify(result));\n        this.log.debug(`Got ${result.results.length} warnings from server`);\n\n        this.library.garbageColleting(`${this.name}.warning`);\n        await this.finishUpdateData();\n    }\n}\nexport class NINAProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: CoordinateProvideOptionsType) {\n        super(adapter, { ...options, service: 'ninaService' }, `nina`);\n    }\n}\nexport class METROProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: CoordinateProvideOptionsType) {\n        super(adapter, { ...options, service: 'metroService' }, `nina`);\n    }\n}\n\nexport class ProviderController extends BaseClass {\n    provider: ProvideClassType[] = [];\n    refreshTimeRef = null;\n    alertTimeoutRef = null;\n    connection = true;\n    name = 'provider';\n    refreshTime: number = 300000;\n    library: Library;\n\n    constructor(adapter: WeatherWarnings) {\n        super(adapter, 'provider');\n        this.library = this.adapter.library;\n    }\n    init(): void {\n        this.refreshTime = this.adapter.config.refreshTime * 60000;\n    }\n\n    createProviderIfNotExist(options: ProvideOptionsType): ProvideClassType {\n        const index = this.provider.findIndex(\n            (p) => p && p.warncellId == options.warncellId && p.getService() == options.service,\n        );\n        if (index == -1) {\n            let p: ProvideClassType;\n            switch (options.service) {\n                case 'dwdService':\n                    if (Array.isArray(options.warncellId)) {\n                        throw new Error('Error 122 warncellId is a Array');\n                    }\n                    p = new DWDProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                    });\n                    break;\n                case 'uwzService':\n                    if (Array.isArray(options.warncellId)) {\n                        throw new Error('Error 123 warncellId is a Array');\n                    }\n                    p = new UWZProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                    });\n                    break;\n                case 'zamgService':\n                    if (!Array.isArray(options.warncellId)) {\n                        throw new Error('Error 124 warncellId is not an Array');\n                    }\n                    p = new ZAMGProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                    });\n                    break;\n                case 'ninaService':\n                    if (!Array.isArray(options.warncellId)) {\n                        throw new Error('Error 125 warncellId is not an Array');\n                    }\n                    p = new NINAProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                        language: this.adapter.config.dwdLanguage,\n                    });\n                    break;\n                default:\n                    throw new Error('Error 126 service is not defined');\n                //todo add metroServicce\n            }\n            if (p) this.provider.push(p);\n            return p;\n        } else {\n            return this.provider[index];\n        }\n    }\n\n    delete(): void {\n        super.delete();\n        for (const p of this.provider) {\n            if (p) p.delete();\n        }\n        this.provider = [];\n        if (this.refreshTimeRef) this.adapter.clearTimeout(this.refreshTimeRef);\n        if (this.alertTimeoutRef) this.adapter.clearTimeout(this.alertTimeoutRef);\n    }\n    sendNoMessages(): void {}\n    updateEndless(that: ProviderController): void {\n        that.connection = false;\n        if (that.refreshTimeRef) that.adapter.clearTimeout(that.refreshTimeRef);\n        if (that.provider.length == 0) {\n            that.setConnected(false);\n            return;\n        }\n        updater(that);\n        async function updater(that: any, index: number = 0): Promise<void> {\n            if (that.unload) return;\n            if (index < that.provider.length) {\n                if (that.provider[index]) await that.provider[index].updateData();\n                index++;\n                that.refreshTimeRef = that.adapter.setTimeout(updater, 500, that, index);\n            } else {\n                await that.doEndOfUpdater();\n                that.refreshTimeRef = that.adapter.setTimeout(that.updateEndless, that.refreshTime || 600000, that);\n            }\n        }\n    }\n    updateAlertEndless(that: any): void {\n        if (that.unload) return;\n\n        that.checkAlerts();\n        /** update every minute after 1.333 seconds. Avoid the full minute, full second and half second :) */\n        const timeout = 61333 - (Date.now() % 60000);\n        that.alertTimeoutRef = that.adapter.setTimeout(that.updateAlertEndless, timeout, that);\n    }\n    checkAlerts(): void {\n        for (const p in this.provider) {\n            this.provider[p].getAlertsAndWrite();\n        }\n    }\n\n    async doEndOfUpdater(): Promise<void> {\n        this.setConnected();\n        let activMessages = 0;\n        for (const a in this.provider) {\n            let am = 0;\n            for (const b in this.provider[a].messages) {\n                if (this.provider[a].messages[b].notDeleted) am++;\n            }\n            this.adapter.library.writedp(\n                `${this.provider[a].name}.activWarnings`,\n                am,\n                genericStateObjects.activWarnings,\n            );\n            activMessages += am;\n        }\n\n        if (activMessages) {\n            for (const a in this.provider) {\n                try {\n                    await this.provider[a].sendMessages();\n                } catch (error) {\n                    this.log.error(error as string);\n                }\n            }\n        } else {\n            this.sendNoMessages();\n        }\n        this.adapter.library.writedp(`${this.name}.activWarnings`, activMessages, genericStateObjects.activWarnings);\n        // reset language\n        this.library.language = '';\n        this.log.debug(`We have ${activMessages} active messages.`);\n    }\n    providersExist(): boolean {\n        return this.provider.length > 0;\n    }\n    async setConnected(status: boolean = this.connection): Promise<void> {\n        const objDef = await this.adapter.library.getObjectDefFromJson(`info.connection`, genericStateObjects);\n        this.adapter.library.writedp(`info.connection`, !!status, objDef);\n    }\n\n    createNotificationService(_options: notificationServiceOptionsType): void {}\n}\nexport type ProvideClassType = DWDProvider | ZAMGProvider | UWZProvider | NINAProvider | METROProvider;\n"],
  "mappings": "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",
  "names": ["axios", "that"]
}
